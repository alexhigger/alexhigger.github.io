<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-08T12:01:37.900Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>alexhigger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MDP自动生成代码流程</title>
    <link href="http://yoursite.com/2020/03/08/MDP%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/08/MDP%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%B5%81%E7%A8%8B/</id>
    <published>2020-03-08T11:53:13.732Z</published>
    <updated>2020-03-08T12:01:37.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MDP自动生成代码流程"><a href="#MDP自动生成代码流程" class="headerlink" title="MDP自动生成代码流程"></a>MDP自动生成代码流程</h2><blockquote><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p></blockquote><ul><li>poml要引入依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板引擎：thymeleaf,java8time--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus完成项目构建所需模板，真实项目不需要使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建自动生成配置类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzh.fenyepage.util;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;</span></span><br><span class="line"><span class="comment">* 代码生成器</span></span><br><span class="line"><span class="comment">* &lt;/p&gt;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> gzh</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"wzh"</span>);<span class="comment">//Mapper,Service类注解中显示创建人信息</span></span><br><span class="line">        <span class="comment">//gc.setBaseColumnList(true); //在Mapper.xml文件中是否生成公用SQL代码段</span></span><br><span class="line">        <span class="comment">//gc.setBaseResultMap(true);  //在Mapper.xml文件中是否生成公用返回集合ResultMap</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);  <span class="comment">//文件生成完毕后，是否需要打开所在路径</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&amp;useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"111111"</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.wzh.fenyepage"</span>);  <span class="comment">//父级公用包名，就是自动生成的文件放在项目路径下的那个包中</span></span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(<span class="string">"/templates/mapper.xml.ftl"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义Mapper.xml文件存放的路径</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mybatis/mapper/"</span></span><br><span class="line">                        + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line">        mpg.setTemplate(<span class="keyword">new</span> TemplateConfig().setXml(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);  <span class="comment">//Entity文件名称命名规范</span></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel); <span class="comment">//Entity字段名称</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">//是否使用lombok完成Entity实体标注Getting Setting ToString 方法</span></span><br><span class="line">        <span class="comment">//strategy.setRestControllerStyle(true); //Controller注解使用是否RestController标注,否则是否开启使用Controller标注</span></span><br><span class="line">        strategy.entityTableFieldAnnotationEnable(<span class="keyword">true</span>); <span class="comment">//是否在Entity属性上通过注解完成对数据库字段的映射</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);  <span class="comment">//Controller注解名称，不使用驼峰，使用连字符</span></span><br><span class="line">        strategy.setTablePrefix(<span class="string">"sys_"</span>);  <span class="comment">//表前缀，添加该表示，则生成的实体，不会有表前缀，比如sys_dept 生成就是Dept</span></span><br><span class="line">        <span class="comment">//strategy.setFieldPrefix("sys_");  //字段前缀</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> FreemarkerTemplateEngine());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行即可"><a href="#运行即可" class="headerlink" title="运行即可"></a>运行即可</h1></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MDP自动生成代码流程&quot;&gt;&lt;a href=&quot;#MDP自动生成代码流程&quot; class=&quot;headerlink&quot; title=&quot;MDP自动生成代码流程&quot;&gt;&lt;/a&gt;MDP自动生成代码流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AutoGenerator 是 MyBat
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue-路由</title>
    <link href="http://yoursite.com/2020/02/11/vue/vue%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2020/02/11/vue/vue%E8%B7%AF%E7%94%B1/</id>
    <published>2020-02-11T10:26:55.391Z</published>
    <updated>2020-02-11T10:40:11.514Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue，bootstrap" scheme="http://yoursite.com/tags/vue%EF%BC%8Cbootstrap/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化开发+bootstrap项目dashboard思路</title>
    <link href="http://yoursite.com/2020/02/11/vue/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/02/11/vue/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</id>
    <published>2020-02-11T10:18:16.660Z</published>
    <updated>2020-01-18T13:43:11.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue组件化开发"><a href="#vue组件化开发" class="headerlink" title="vue组件化开发"></a>vue组件化开发</h2><p>组件（component） 是 Vue.js 最强大的功能之一。<br>Vue 中的组件化开发就是把网页的重复代码抽取出来 ，封装成一个个可复用的视图组件，然后将这些视图组件拼接<br>到一块就构成了一个完整的系统。这种方式非常灵活，可以极大的提高我们开发和维护的效率。<br>通常一套系统会以一棵嵌套的组件树的形式来组织：  </p><blockquote><p>例如：项目可能会有头部、底部、页侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类<br>的组件。<br><img src="https://i.loli.net/2020/01/18/dpXyeV5cTNmhxRD.png" alt="QQ图片20200118213001.png"></p></blockquote><ul><li>组件就是对局部视图的封装，每个组件包含了：<ul><li>HTML 结构</li><li>CSS 样式</li><li>JavaScript 行为<ul><li>data 数据</li><li>methods 行为</li></ul></li></ul></li><li>提高开发效率，增强可维护性，更好的去解决软件上的高耦合、低内聚、无重用的3大代码问题</li><li>Vue 中的组件思想借鉴于 React</li><li>目前主流的前端框架：Angular、React 、Vue 都是组件化开发思想</li></ul><h2 id="组件化基本开发步骤"><a href="#组件化基本开发步骤" class="headerlink" title="组件化基本开发步骤"></a>组件化基本开发步骤</h2><ul><li>定义组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义局部组件对象</span></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt; 这是：&#123;&#123; name &#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: <span class="string">'局部组件'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>组件名：<ul><li>可使用驼峰(camelCase)或者横线分隔(kebab-case)命名方式</li><li>但 DOM 中只能使用横线分隔方式进行引用组件</li><li>官方强烈推荐组件名字母全小写且必须包含一个连字符 如 component-a</li></ul></li><li>template：定义组件的视图模板</li><li>data ：在组件中必须是一个函数</li></ul></blockquote></li><li>注册组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123; <span class="comment">// 局部组件</span></span><br><span class="line">         <span class="string">'component-b'</span>: ComponentB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>使用组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过组件名直接使用, 不能使用驼峰形式 --&gt;</span><br><span class="line">&lt;component-b &gt;<span class="xml"><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="dashboard项目大致思路"><a href="#dashboard项目大致思路" class="headerlink" title="dashboard项目大致思路"></a>dashboard项目大致思路</h2><ul><li>创建vue实例（放进main.js中，index引入即可）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建vue实例 --&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      components: &#123;</span><br><span class="line">         <span class="comment">//注册模板</span></span><br><span class="line">        AppNavbar   <span class="comment">// ES6 等价于AppNavbar: AppNavbar</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li><li>定义模板(抽取到components文件夹中，index引入即可)<ul><li>以头部组件AppNavbar.js为例 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AppNavbar.js</span></span><br><span class="line"></span><br><span class="line">; (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用window.来取代const，const定义的不能被外部调用</span></span><br><span class="line">    <span class="built_in">window</span>.AppNavbar = &#123;</span><br><span class="line">        template: <span class="string">` &lt;nav class="navbar navbar-inverse navbar-fixed-top"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="container-fluid"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="navbar-header"&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar"</span></span><br><span class="line"><span class="string">          aria-expanded="false" aria-controls="navbar"&gt;</span></span><br><span class="line"><span class="string">          &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;span class="icon-bar"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;span class="icon-bar"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;span class="icon-bar"&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;a class="navbar-brand" href="#"&gt;&#123;&#123;projectName&#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div id="navbar" class="navbar-collapse collapse"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="nav navbar-nav navbar-right"&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;a href="#"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;a href="#"&gt;Settings&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;a href="#"&gt;Profile&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;&lt;a href="#"&gt;Help&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;form class="navbar-form navbar-right"&gt;</span></span><br><span class="line"><span class="string">          &lt;input type="text" class="form-control" placeholder="Search..." @blur="search"&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/nav&gt;`</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                projectName: <span class="string">'bootstrap+vue'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            search() &#123;</span><br><span class="line">                alert(<span class="string">'失去焦点'</span>)<span class="comment">//搜索框失去焦点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul></li><li>index引入相关模板  </li><li>相应位置添加模板<br><img src="https://i.loli.net/2020/01/18/YGldchTVJMnZoax.png" alt="QQ图片20200118210744.png"></li></ul><h3 id="项目结构极简化"><a href="#项目结构极简化" class="headerlink" title="项目结构极简化"></a>项目结构极简化</h3><ul><li><p>index留一个组件的出口，此处要被子组件替换 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其余部分全部组件化，由script标签引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：Dashboard.js 和 HomeList.js 要在 Home.js 前面引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/Home/Dashboard.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/Home/HomeList.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"components/Home/Home.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"App.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><blockquote><ul><li>组件可以理解为特殊的 Vue 实例，不需要手动实例化，管理自己的 template 模板</li><li>组件的 template 必须有且只有一个根节点</li><li>组件的 data 选项必须是函数，且函数体返回一个对象</li><li>组件与组件之间是相互独立的，可以配置自己的一些选项资源 data、methods、computed 等等</li><li>思想：组件自己管理自己，不影响别人</li></ul></blockquote></li><li><p>结构图<br><img src="https://i.loli.net/2020/01/18/O9G45WqrBNAMKhF.png" alt="bootstrap-vue组件化结构.png"><br>效果图<br><img src="https://i.loli.net/2020/01/18/xITjbgJci6aQnhK.png" alt="QQ图片20200118214216.png"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue组件化开发&quot;&gt;&lt;a href=&quot;#vue组件化开发&quot; class=&quot;headerlink&quot; title=&quot;vue组件化开发&quot;&gt;&lt;/a&gt;vue组件化开发&lt;/h2&gt;&lt;p&gt;组件（component） 是 Vue.js 最强大的功能之一。&lt;br&gt;Vue 中的组件化开
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="bootstrap" scheme="http://yoursite.com/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>vue-组件通信</title>
    <link href="http://yoursite.com/2020/02/11/vue/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/02/11/vue/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2020-02-11T10:17:41.294Z</published>
    <updated>2020-01-20T06:10:07.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件间通信规则"><a href="#组件间通信规则" class="headerlink" title="组件间通信规则"></a>组件间通信规则</h2><ol><li>不要在子组件中直接修改父组件传递的数据</li><li>数据初始化时，应当看初始化的数据是否用于多个组件中，如果需要被用于多个组件中，则初始化在父组件<br>中；如果只在一个组件中使用，那就初始化在这个要使用的组件中。</li><li>数据初始化在哪个组件, 更新数据的方法(函数)就应该定义在哪个组件。</li></ol><hr><h1 id="组件间通信方式"><a href="#组件间通信方式" class="headerlink" title="组件间通信方式"></a>组件间通信方式</h1><h2 id="props-父组件向子组件传递数据"><a href="#props-父组件向子组件传递数据" class="headerlink" title="props 父组件向子组件传递数据"></a>props 父组件向子组件传递数据</h2><ul><li>在声明组件对象中使用 props 选项指定<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&lt;/div&gt;'</span>,</span><br><span class="line">    props: <span class="comment">//此处值有以下3种方式,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方式1：指定传递属性名，注意是 数组形式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'id'</span>,<span class="string">'name'</span>，<span class="string">'salary'</span>, <span class="string">'isPublished'</span>, <span class="string">'commentIds'</span>, <span class="string">'author'</span>, <span class="string">'getEmp'</span>]</span><br></pre></td></tr></table></figure>方式2：指定传递属性名和数据类型，注意是 对象形式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    id: <span class="built_in">Number</span>,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    salary: <span class="built_in">Number</span>,</span><br><span class="line">    isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">    commentIds: <span class="built_in">Array</span>,</span><br><span class="line">    author: <span class="built_in">Object</span>,</span><br><span class="line">    getEmp: <span class="built_in">Function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方式3：指定属性名、数据类型、必要性、默认值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">name: &#123;</span><br><span class="line">type: <span class="built_in">String</span>,</span><br><span class="line">required: <span class="literal">true</span>,</span><br><span class="line"><span class="keyword">default</span>: <span class="string">'mxg'</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引用组件时动态赋值<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:id</span>=<span class="string">"2"</span> <span class="attr">:name</span>=<span class="string">"meng"</span> <span class="attr">:salary</span>=<span class="string">"9999"</span> <span class="attr">:is-published</span>=<span class="string">"true"</span> <span class="attr">:commentids</span>=<span class="string">"[1, 2]"</span> <span class="attr">:author</span>=<span class="string">"&#123;name: 'alan'&#125;"</span> <span class="attr">:get-emp</span>=<span class="string">"getEmp"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>传递数据注意</li></ul><ol><li>props 只用于父组件向子组件传递数据</li><li>所有标签属性都会成为组件对象的属性, 模板页面可以直接引用</li><li>问题  <ul><li>如果需要向非子后代传递数据，必须多层逐层传递</li><li>兄弟组件间也不能直接 props 通信, 必须借助父组件才可以</li></ul></li></ol><hr><h2 id="emit-自定义事件"><a href="#emit-自定义事件" class="headerlink" title="$emit 自定义事件"></a>$emit 自定义事件</h2><p>作用：通过 自定义事件 来代替 props 传入函数形式</p><ul><li>绑定自定义事件<br>在父组件中定义事件监听函数，并引用子组件标签上 v-on 绑定事件监听。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    // 通过 v-on 绑定</span><br><span class="line">// @自定义事件名=事件监听函数</span><br><span class="line">// 在子组件 dashboard 中触发 delete_hobby 事件来调用 deleteHobby 函数</span><br><span class="line"><span class="tag">&lt;<span class="name">dashboard</span> @<span class="attr">delete_hobby</span>=<span class="string">"deleteHobby"</span>&gt;</span><span class="tag">&lt;/<span class="name">dashboard</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>触发监听事件函数执行<br>在子组件中触发父组件的监听事件函数调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 子组件触发事件函数调用</span></span><br><span class="line"><span class="comment">// this.$emit(自定义事件名, data)</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'delete_emp'</span>, index)</span><br></pre></td></tr></table></figure></li><li>自定义事件注意</li></ul><ol><li>自定义事件只用于子组件向父组件发送消息(数据)</li><li>隔代组件或兄弟组件间通信此种方式不合适<h2 id="slot-插槽分发内容"><a href="#slot-插槽分发内容" class="headerlink" title="slot 插槽分发内容"></a>slot 插槽分发内容</h2>作用: 主要用于父组件向子组件传递 标签+数据 , （而上面prop和自定事件只是传递数据）<br>场景：一般是某个位置需要经常动态切换显示效果（如饿了么）下图所示<br><img src="https://i.loli.net/2020/01/19/EKripjOLw2kJCS5.png" alt="QQ图片20200119193236.png">  </li></ol><ul><li>子组件定义插槽<br>在子组件中定义插槽, 当父组件向指定插槽传递标签数据后, 插槽处就被渲染，否则插槽处不会被渲染.<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性值指定唯一插槽名，父组件通过此名指定标签数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"aaa"</span>&gt;</span>不确定的标签结构 1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>组件确定的标签结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"bbb"</span>&gt;</span>不确定的标签结构 2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>父组件传递标签数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;child&gt;</span><br><span class="line">    &lt;!--slot属性值对应子组件中的插槽的name属性值--&gt;</span><br><span class="line">    &lt;div slot=<span class="string">"aaa"</span>&gt;向 name=aaa 的插槽处插入此标签数据&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div slot="bbb"&gt;向 name=bbb 的插槽处插入此标签数据&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/child&gt;</span></span><br></pre></td></tr></table></figure></li><li>插槽注意事项</li></ul><ol><li>只能用于父组件向子组件传递 标签+数据</li><li>传递的插槽标签中的数据处理都需要定义所在父组件中</li></ol><h2 id="非父子组件间通信PubSubJS库"><a href="#非父子组件间通信PubSubJS库" class="headerlink" title="非父子组件间通信PubSubJS库"></a>非父子组件间通信PubSubJS库</h2><p>Vue.js可通过PubSubJs库来实现非父子组件之间的通信，使用 PubsubJS的消息发布与订阅模<br>据的传递。<br>理解:订阅信息==== 绑定事件监听, 发布消息====触发事件。<br>注意:但是必须先执行订阅事件subscribe , 然后才能publish发布事件。</p><ul><li>订阅消息（绑定事件监听）<br>先在created钩子函数中订阅消息<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;                     <span class="comment">//event接收的是消息名称，data接收发布时传递的数据</span></span><br><span class="line">          PubSub.subscribe(<span class="string">'消息名称（事件名）'</span>, (event,data) =&gt; &#123; <span class="comment">//箭头函数</span></span><br><span class="line">              <span class="comment">//事件回调处理</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li><li>发布消息（触发事件）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PubSub.publish( <span class="string">'消息名称（事件名）'</span>,data)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件间通信规则&quot;&gt;&lt;a href=&quot;#组件间通信规则&quot; class=&quot;headerlink&quot; title=&quot;组件间通信规则&quot;&gt;&lt;/a&gt;组件间通信规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不要在子组件中直接修改父组件传递的数据&lt;/li&gt;
&lt;li&gt;数据初始化时，应当看初始化的数
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue，bootstrap" scheme="http://yoursite.com/tags/vue%EF%BC%8Cbootstrap/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统---加载loading+异常响应</title>
    <link href="http://yoursite.com/2020/02/09/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E5%8A%A0%E8%BD%BDloading+%E5%BC%82%E5%B8%B8%E5%93%8D%E5%BA%94/"/>
    <id>http://yoursite.com/2020/02/09/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E5%8A%A0%E8%BD%BDloading+%E5%BC%82%E5%B8%B8%E5%93%8D%E5%BA%94/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-09T05:08:57.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用：加载数据时-实现加载中动效-提高用户体验度"><a href="#作用：加载数据时-实现加载中动效-提高用户体验度" class="headerlink" title="作用：加载数据时, 实现加载中动效, 提高用户体验度"></a>作用：加载数据时, 实现加载中动效, 提高用户体验度</h1><h2 id="按需导入-ElementUI-组件-Loading-Message"><a href="#按需导入-ElementUI-组件-Loading-Message" class="headerlink" title="按需导入 ElementUI 组件 Loading , Message"></a>按需导入 ElementUI 组件 Loading , Message</h2><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入 ElementUI 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Loading, Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="加载数据时，-打开和关闭动效-对象"><a href="#加载数据时，-打开和关闭动效-对象" class="headerlink" title="加载数据时， 打开和关闭动效 对象"></a>加载数据时， 打开和关闭动效 对象</h2><p>注意： loadingInstance 实例采用单例模式创建，防止响应异常时频繁切换路由时加载动效重复创建  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 加载数据时打开和关闭动效对象</span></span><br><span class="line">        <span class="keyword">const</span> loading = &#123;</span><br><span class="line">            loadingInstance: <span class="literal">null</span>, <span class="comment">// Loading实例</span></span><br><span class="line">            open: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 打开加载</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'加载中'</span>, <span class="keyword">this</span>.loadingInstance)</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.loadingInstance === <span class="literal">null</span>) &#123; <span class="comment">// 创建单例, 防止切换路由重复加载</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'创建加载实例..'</span>)</span><br><span class="line">                    <span class="keyword">this</span>.loadingInstance = Loading.service(&#123;</span><br><span class="line">                        text: <span class="string">'拼命加载中'</span>,</span><br><span class="line">                        target: <span class="string">'.main'</span>, <span class="comment">// 效果显示区域</span></span><br><span class="line">                        background: <span class="string">'rgba(0, 0, 0, 0.5)'</span>, <span class="comment">// 加载效果</span></span><br><span class="line">                        spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            close: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 关闭加载</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.loadingInstance !== <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.loadingInstance.close()</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'结束加载'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.loadingInstance = <span class="literal">null</span> <span class="comment">// 关闭后实例重新赋值null, 下次让它重新创建</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">~~~  </span><br><span class="line">## 请求拦截器中打开加载效果, 响应拦截器和异常中关闭加载效果.</span><br><span class="line">    ~~~js</span><br><span class="line">        <span class="comment">// 请求拦截器</span></span><br><span class="line">        request.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            loading.open() <span class="comment">// 打开加载效果</span></span><br><span class="line">            <span class="keyword">return</span> config</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">            <span class="comment">// 出现异常</span></span><br><span class="line">            loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 响应拦截器</span></span><br><span class="line">        request.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">            loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h1 id="msm-src-utils-request-js完整代码"><a href="#msm-src-utils-request-js完整代码" class="headerlink" title="msm\src\utils\request.js完整代码"></a>msm\src\utils\request.js完整代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="comment">// 按需导入 ElementUI 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Loading, Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="comment">// 加载数据时打开和关闭动效对象</span></span><br><span class="line"><span class="keyword">const</span> loading = &#123;</span><br><span class="line">    loadingInstance: <span class="literal">null</span>, <span class="comment">// Loading实例</span></span><br><span class="line">    open: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 打开加载</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'加载中'</span>, <span class="keyword">this</span>.loadingInstance)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.loadingInstance === <span class="literal">null</span>) &#123; <span class="comment">// 创建单例, 防止切换路由重复加载</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'创建加载实例..'</span>)</span><br><span class="line">            <span class="keyword">this</span>.loadingInstance = Loading.service(&#123;</span><br><span class="line">                text: <span class="string">'拼命加载中'</span>,</span><br><span class="line">                target: <span class="string">'.main'</span>, <span class="comment">// 效果显示区域</span></span><br><span class="line">                background: <span class="string">'rgba(0, 0, 0, 0.5)'</span>, <span class="comment">// 加载效果</span></span><br><span class="line">                spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    close: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 关闭加载</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.loadingInstance !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.loadingInstance.close()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'结束加载'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.loadingInstance = <span class="literal">null</span> <span class="comment">// 关闭后实例重新赋值null, 下次让它重新创建</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动创建一个 axios 对象, 参考: https://github.com/axios/axios#creating-an-instance</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 请求配置参考: https://github.com/axios/axios#request-config</span></span><br><span class="line">    <span class="comment">// 根据不同环境设置 baseURL, 最终发送请求时的URL为: baseURL + 发送请求时写URL ,</span></span><br><span class="line">    <span class="comment">// 比如 get('/test'), 最终发送请求是: /dev-api/test</span></span><br><span class="line">    <span class="comment">// baseURL: '/dev-api',</span></span><br><span class="line">    <span class="comment">// baseURL: '/',</span></span><br><span class="line">    <span class="comment">// 根目录下的 .env.development 与 .env.production 中配置 VUE_APP_BASE_API</span></span><br><span class="line">    baseURL: process.env.VUE_APP_BASE_API, <span class="comment">// "/dev-api"</span></span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// 请求超时</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    loading.open() <span class="comment">// 打开加载效果</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 出现异常</span></span><br><span class="line">    loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">request.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    loading.close() <span class="comment">// 关闭加载效果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request <span class="comment">// 导出 axios 对象</span></span><br></pre></td></tr></table></figure><h1 id="异常响应"><a href="#异常响应" class="headerlink" title="异常响应"></a>异常响应</h1><p>请求接口超时，应该EasyMock服务接口不稳定<br>一般都是在请求后台服务接口时会出现异常，而请求服务接口都是通过 axios 发送的请求，所以可在 axios 响应拦<br>截器进行统一处理。</p><ol><li><p>检查 Message 组件是导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Loading, Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br></pre></td></tr></table></figure></li><li><p>在 axios 响应拦截器中处理异常</p><pre><code class="js"><span class="comment">// 响应拦截器</span>request.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> { loading.close() <span class="comment">// 关闭加载效果</span> <span class="comment">// 如果后台响应状态码不是 2000 , 说明后台服务有异常,统一可在此处处理</span> <span class="keyword">const</span> resp = response.data <span class="keyword">if</span> (resp.code !== <span class="number">2000</span>) {     Message({         message: res.message || <span class="string">'系统异常'</span>,         type: <span class="string">'warning'</span>,         duration: <span class="number">5</span> * <span class="number">1000</span> <span class="comment">// 停留时长</span>     }) } <span class="keyword">return</span> response}, error =&gt; { loading.close() <span class="comment">// 关闭加载效果</span> <span class="comment">// 当请求接口出错时, 进行弹出错误提示, 如 404, 500, 请求超时</span> <span class="built_in">console</span>.log(<span class="string">'response error'</span>, error.response.status) Message({     message: error.message,     type: <span class="string">'error'</span>,     duration: <span class="number">5</span> * <span class="number">1000</span> }) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);})</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用：加载数据时-实现加载中动效-提高用户体验度&quot;&gt;&lt;a href=&quot;#作用：加载数据时-实现加载中动效-提高用户体验度&quot; class=&quot;headerlink&quot; title=&quot;作用：加载数据时, 实现加载中动效, 提高用户体验度&quot;&gt;&lt;/a&gt;作用：加载数据时, 实现
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>vuex版msm会员管理系统</title>
    <link href="http://yoursite.com/2020/02/09/msm/vuex--msm/"/>
    <id>http://yoursite.com/2020/02/09/msm/vuex--msm/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-10T15:32:22.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要重构地方"><a href="#主要重构地方" class="headerlink" title="主要重构地方"></a>主要重构地方</h1><ul><li><p>登录</p></li><li><p>获取用户信息</p></li><li><p>退出</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1></li><li><p>登录与 token 状态管理</p><ol><li>在 src\utils\ 目录下创建 auth.js， 封装 token 和 用户信息工具模块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TOKEN_KEY = <span class="string">'msm-token'</span></span><br><span class="line"><span class="keyword">const</span> USER_KEY = <span class="string">'msm-user'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 token </span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.getItem(TOKEN_KEY)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保存 token</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage.setItem(TOKEN_KEY, token)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(USER_KEY))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setUser</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    localStorage.setItem(USER_KEY, <span class="built_in">JSON</span>.stringify(user))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    localStorage.removeItem(TOKEN_KEY)</span><br><span class="line">    localStorage.removeItem(USER_KEY)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src 目录下新建 store\modules 目录，modules 下创建 user.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, setUser, getUser, removeToken &#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserInfo, logout &#125; <span class="keyword">from</span> <span class="string">'@/api/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        token: <span class="literal">null</span>,</span><br><span class="line">        user: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        SET_TOKEN(state, token) &#123;</span><br><span class="line">            state.token = token</span><br><span class="line">            setToken(token)</span><br><span class="line">        &#125;,</span><br><span class="line">        SET_USER(state, user) &#123;</span><br><span class="line">            state.user = user</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">// 登录</span></span><br><span class="line">        Login(&#123; commit &#125;, form) &#123;</span><br><span class="line">            <span class="comment">// 提交表单给后台进行验证是否正确</span></span><br><span class="line">            <span class="comment">// resolve 触发成功处理，reject 触发异常处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                login(form.username.trim(), form.password).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> resp = response.data</span><br><span class="line">                    commit(<span class="string">'SET_TOKEN'</span>, resp.data.token)</span><br><span class="line">                    resolve(resp)</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    reject(error)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> user</span><br><span class="line">~~~ </span><br><span class="line"><span class="number">3.</span> 在 src\store 目录下创建 index.js</span><br><span class="line">~~~js</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line">    <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">    user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li>修改 src 下的 main.js，导入和注册 store<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...省略</span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./permission'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store, <span class="comment">// 注册</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure></li><li>重构登录组件 views\login\index.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">const</span> pro = <span class="keyword">this</span>.$store.dispatch(<span class="string">"Login"</span>, <span class="keyword">this</span>.form).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'response.flag'</span>,response.flag)</span><br><span class="line">            <span class="keyword">if</span> (response.flag) &#123;</span><br><span class="line">                <span class="comment">//前往首页</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                message: response.message,</span><br><span class="line">                type: <span class="string">"warning"</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"验证失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>测试登录是否正常进入，并观察浏览器中localStorage是否有值</li></ol></li><li><p>解决刷新页面回到登录页面<br>  当前在 permission.js 路由拦截中是通过浏览器 localStorage 获取 token 值，但现在使用的Vuex状态管理，那我<br>  们希望通过 store 来获取 token 状态值.</p><ol><li>在 src\permission.js 中将获取 token 方式替换为从 store 状态中获取，  如下：<br>注意要 import 导入 store<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">。。。</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span> , next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 1. 获取token</span></span><br><span class="line"><span class="comment">// const token = localStorage.getItem('mxg-msm-token')</span></span><br><span class="line"><span class="keyword">const</span> token = store.state.user.token</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure></li><li>重新访问登录 <a href="http://localhost:8888/#/login" target="_blank" rel="noopener">http://localhost:8888/#/login</a> ，登录后一样可以进入首页</li><li>刷新首页，发现会回到登录页面。因为刷新 后token状态值还原初始值 null, 所以又会要求 重新登录</li><li>解决刷新页面重新登录的问题，在 src\store\modules\user.js 中 token 初始值为 getToken()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getToken, setToken, setUser, getUser, removeToken&#125; <span class="keyword">from</span> <span class="string">'@/utils/auth'</span></span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserInfo, logout&#125; <span class="keyword">from</span> <span class="string">'@/api/login'</span></span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">    token: getToken(), <span class="comment">// getToken() 作为token初始值，解决刷新页面之后token为null</span></span><br><span class="line">    user: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">。。。</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><h1 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h1>之前获取用户信息是在登录中一起获取的，其实可以在权限拦截器（ permission.js ）中进行获取就行。  </li></ol></li></ul><ol><li>修改 src\store\modules\user.js， 在 actions 中添加 GetUserInfo 方法 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过token获取用户信息</span></span><br><span class="line">    GetUserInfo(&#123; commit, state &#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            getUserInfo(state.token).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> respUser = response.data</span><br><span class="line">                commit(<span class="string">'SET_USER'</span>, respUser.data)</span><br><span class="line">                resolve(respUser)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                reject(error)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li>修改 src\permission.js ， 从 store 中获取用户数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 获取token</span></span><br><span class="line">    <span class="comment">// const token = localStorage.getItem('mxg-msm-token')</span></span><br><span class="line">    <span class="keyword">const</span> token = store.state.user.token</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'token'</span>, token)</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="comment">// 1.1 如果没有获取到，</span></span><br><span class="line">        <span class="comment">// 要访问非登录页面，则不让访问，加到登录页面 /login</span></span><br><span class="line">        <span class="keyword">if</span> (to.path !== <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 请求登录页面 /login</span></span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 1.2 获取到token,</span></span><br><span class="line">        <span class="comment">// 1.2.1 请求路由 /login ，那就去目标路由</span></span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1.2.2 请求路由非登录页面，先在本地查看是否有用户信息，</span></span><br><span class="line">            <span class="comment">// const userInfo = localStorage.getItem('mxg-msm-user')</span></span><br><span class="line">            <span class="keyword">const</span> userInfo = store.state.user.user</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'userInfo'</span>, userInfo)</span><br><span class="line">            <span class="keyword">if</span> (userInfo) &#123;</span><br><span class="line">                <span class="comment">// 本地获取到，则直接让它去目标路由</span></span><br><span class="line">                next()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'获取用户信息'</span>)</span><br><span class="line">                <span class="comment">// 如果本地没有用户信息， 就通过token去获取用户信息，</span></span><br><span class="line">                store.dispatch(<span class="string">'GetUserInfo'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (response.flag) &#123;</span><br><span class="line">                        next()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        next(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>测试， 当登录后，查看localstorage 中有用户数据和 token</li></ol><h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><ol><li>修改 src\store\modules\user.js， 在 actions 中添加 Logout 方法 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出</span></span><br><span class="line">Logout(&#123; commit, state &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        logout(state.token).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> resp = response.data</span><br><span class="line">            commit(<span class="string">'SET_TOKEN'</span>, <span class="string">''</span>)</span><br><span class="line">            commit(<span class="string">'SET_USER'</span>, <span class="literal">null</span>)</span><br><span class="line">            removeToken()</span><br><span class="line">            resolve(resp)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 src\components\AppHeader\index.vue 头部组件,<ul><li>修改 data 选项中的 user 属性值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">// user: JSON.parse(localStorage.getItem('mxg-msm-user')),</span></span><br><span class="line">user: <span class="keyword">this</span>.$store.state.user.user,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 methods 选项中的 handleLogout 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出系统</span></span><br><span class="line">    handlelogout() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"Logout"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.flag) &#123;</span><br><span class="line">        <span class="comment">// 退出成功</span></span><br><span class="line">        <span class="comment">// 回到登录页面</span></span><br><span class="line">        <span class="keyword">this</span>.$router.push(<span class="string">"/login"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: resp.message,</span><br><span class="line">            type: <span class="string">"warning"</span>,</span><br><span class="line">            duration: <span class="number">500</span> <span class="comment">// 弹出停留时间</span></span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li>测试 右上角显示名字正常, 退出正常</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要重构地方&quot;&gt;&lt;a href=&quot;#主要重构地方&quot; class=&quot;headerlink&quot; title=&quot;主要重构地方&quot;&gt;&lt;/a&gt;主要重构地方&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;登录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取用户信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;退
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>vuex状态管理</title>
    <link href="http://yoursite.com/2020/02/09/vue/vuex/"/>
    <id>http://yoursite.com/2020/02/09/vue/vuex/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-10T05:28:18.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuex-概述"><a href="#Vuex-概述" class="headerlink" title="Vuex 概述"></a>Vuex 概述</h1><ol><li>官方文档：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a><br> Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状<br> 态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>Vuex简单理解：<ul><li>Vue 应用中的每个组件在 data() 中封装着自己数据属性，而这些 data 属性都是私有的，完全隔离的。</li><li>如果我们希望多个组件都能读取到同一状态数据属性，或者不同组件的行为需要更新同一状态数据属性，<br>这就需要一个将共享的状态数据属性进行集中式的管理。</li><li>这就是 Vuex 状态管理所要解决的问题。<h1 id="Vuex-入门实战"><a href="#Vuex-入门实战" class="headerlink" title="Vuex 入门实战"></a>Vuex 入门实战</h1><h2 id="安装依赖和运行"><a href="#安装依赖和运行" class="headerlink" title="安装依赖和运行"></a>安装依赖和运行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进入工程目录</span><br><span class="line">cd vuex-demo</span><br><span class="line"># 安装依赖</span><br><span class="line">npm install --save vuex</span><br><span class="line"># 运行项目</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="读取状态值-state"><a href="#读取状态值-state" class="headerlink" title="读取状态值 state"></a>读取状态值 state</h2></li></ul></li></ol><ul><li><p>理解</p><blockquote><p>每一个 Vuex 项目的核心就是 store（仓库）。 store 就是一个对象，它包含着你的项目中大部分的状态(state)。<br>state 是 store 对象中的一个选项，是 Vuex 管理的状态对象（共享的数据属性）</p></blockquote></li><li><p>实操</p><ol><li>在 src 目录下创建 store 目录，store 下创建 index.js 文件， 编码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 引入 Vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">// 注意V 和 S都是大写字母</span></span><br><span class="line">    <span class="comment">// 存放状态（共享属性）</span></span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li></ol></li><li><p>修改 main.js，导入和注册 store</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"><span class="comment">// 导入的是 src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store, <span class="comment">// 注册</span></span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure></li><li><p>组件中读取 state 状态数据，修改 src\views\Home.vue</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        count: &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="http://localhost:8080/#/" target="_blank" rel="noopener">http://localhost:8080/#/</a> 页面显示 count: 1</p><h2 id="改变状态值-mutation"><a href="#改变状态值-mutation" class="headerlink" title="改变状态值 mutation"></a>改变状态值 mutation</h2></li><li><p>理解</p><ol><li>在 store 的 mutations 选项中定义方法，才可以改变状态值。</li><li>在通过 $store.commit(‘mutationName’) 触发状态值的改变</li></ol></li><li><p>实操</p><ol><li>修改 store/index.js , 在 store 中添加 mutations 选项，编码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 引入 Vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">// 注意V 和 S都是大写字母</span></span><br><span class="line">    <span class="comment">// 存放状态（共享属性）</span></span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//改变state状态值</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    increment(state) &#123;</span><br><span class="line">        state.count ++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">        state.count--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 src\views\Home.vue ，调用 mutations 中 increment、decrement 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    count:&#123;&#123;$store.state.count&#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">"addCount"</span>&gt;加法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="decrement"&gt;减法&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    addCount() &#123;</span><br><span class="line">    <span class="comment">//获取状态值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.state.count);</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"increment"</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    decrement() &#123;</span><br><span class="line">    <span class="comment">// 通过commit 调用 mutations 中的 decrement 改变状态值</span></span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">"decrement"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><ol start="3"><li>访问： 点击 加法 按钮，控制台和页面显示数字变化<h2 id="提交载荷"><a href="#提交载荷" class="headerlink" title="提交载荷"></a>提交载荷</h2> 你可以向 $store.commit 传入额外的参数，即 mutation 的 载荷（payload）：  </li></ol><ul><li>修改 src\store 下的 index.js  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">    increment (state, n) &#123; <span class="comment">// n 为载荷</span></span><br><span class="line">    state.count += n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li>修改 views\Home.vue 组件  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//加法</span></span><br><span class="line">addCount() &#123;</span><br><span class="line">  <span class="comment">//获取状态值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.state.count);</span><br><span class="line">  <span class="keyword">this</span>.$store.commit(<span class="string">"increment"</span>,<span class="number">10</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2></li><li>理解<br>  Action 类似于 mutation，不同在于：  <ul><li>Action 提交的是 mutation，而不是在组件中直接变更状态， 通过它间接更新 state。</li><li>在组件中通过 this.$store.dispatch(‘actionName’) 触发状态值间接改变</li><li>Action 也支持载荷</li><li>Action 可以包含任意异步操作。</li></ul></li><li>实操<ol><li>修改 store/index.js ，增加 actions 选项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    add(context, n) &#123;</span><br><span class="line">        <span class="comment">// 触发 mutations 中的 increment 改变 state</span></span><br><span class="line">        context.commit(<span class="string">'increment'</span>, n)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(&#123; commit, state &#125;) &#123; <span class="comment">// 按需传值</span></span><br><span class="line">        commit(<span class="string">'decrement'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 views\Home.vue, 触发 action 改变值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  methods: &#123;</span><br><span class="line">  <span class="comment">//加法</span></span><br><span class="line">  addCount() &#123;</span><br><span class="line">    <span class="comment">// 获取状态值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.state.count);</span><br><span class="line">    <span class="comment">// 通过commit 调用 mutations 中的 increment 改变状态值</span></span><br><span class="line">    <span class="comment">// this.$store.commit('increment')</span></span><br><span class="line">    <span class="comment">// this.$store.commit('increment', 10) // 提交载荷</span></span><br><span class="line">    <span class="comment">// 触发 actions 中的 add 改变状态值</span></span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"add"</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement() &#123;</span><br><span class="line">    <span class="comment">// this.$store.commit('decrement')</span></span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"decrement"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="派生属性-getter"><a href="#派生属性-getter" class="headerlink" title="派生属性 getter"></a>派生属性 getter</h2></li></ol></li><li>理解<ul><li>有时候我们需要从 store 中的 state 中派生出一些状态。<br>例如：基于上面代码，增加一个 desc 属性，当 count 值小于 50，则 desc 值为 吃饭 ; 大于等于 50 小于<br>100，则desc 值为 睡觉 ; 大于100 , 则 desc 值为 打豆豆 。这时我们就需要用到 getter 为我们解决。  </li><li>getter 其实就类似于计算属性(get)的对象.</li><li>组件中读取 $store.getters.xxx</li></ul></li><li>实操</li></ul><ol><li>修改 store\index.js ,增加 getters 选项<br> 注意：getters 中接受 state 作为其第一个参数，也可以接受其他 getter 作为第二个参数 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//派生属性</span></span><br><span class="line">getters: &#123;</span><br><span class="line">    desc(state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state.count &lt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'吃饭'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'睡觉'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'打豆豆'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工程模块化"><a href="#工程模块化" class="headerlink" title="工程模块化"></a>工程模块化</h2></li></ol><ul><li>Module<br>  由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。<br>  当应用变得非常复杂时，store 对象就有可能变得相当臃肿。<br>  为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。<br>  每个模块拥有自己的 state、mutation、action、getter 等，参见以下代码模型      <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">state: &#123; ... &#125;,</span><br><span class="line">mutations: &#123; ... &#125;,</span><br><span class="line">actions: &#123; ... &#125;,</span><br><span class="line">getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">state: &#123; ... &#125;,</span><br><span class="line">mutations: &#123; ... &#125;,</span><br><span class="line">actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">modules: &#123;</span><br><span class="line">a: moduleA,</span><br><span class="line">b: moduleB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure></li><li>工程模块化进行改造<ol><li>修改 store\index.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 引入 Vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> home = &#123;</span><br><span class="line">    <span class="comment">// 存放状态（共享属性）</span></span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//派生属性</span></span><br><span class="line">    getters: &#123;</span><br><span class="line">        desc(state) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.count &lt; <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'吃饭'</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'睡觉'</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'打豆豆'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 改变 state 状态</span></span><br><span class="line">    mutations: &#123;</span><br><span class="line">        increment(state, n) &#123; <span class="comment">// n 为载荷</span></span><br><span class="line">            <span class="comment">// state.count ++</span></span><br><span class="line">            state.count += n</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement(state) &#123;</span><br><span class="line">            state.count--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        add(context) &#123;</span><br><span class="line">            <span class="comment">// 触发 mutations 中的 increment 改变 state</span></span><br><span class="line">            context.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement(&#123; commit, state &#125;) &#123; <span class="comment">// 按需传值</span></span><br><span class="line">            commit(<span class="string">'decrement'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">// 注意V 和 S都是大写字母</span></span><br><span class="line">    modules: &#123;</span><br><span class="line">        home <span class="comment">// home: home</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li>修改 Home.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!--修改部分--&gt;</span><br><span class="line">    count: &#123;&#123; $store.state.home.count &#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">"addCount"</span>&gt;加法&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="decrement"&gt;减法&lt;/</span>button&gt;</span><br><span class="line">    派生属性desc: &#123;&#123; $store.getters.desc &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">    addCount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store.state.home.count);</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"add"</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">"decrement"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 About.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"about"</span>&gt;</span><br><span class="line">    About: &#123;&#123; $store.state.home.count &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">~</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="Module模块化项目结构"><a href="#Module模块化项目结构" class="headerlink" title="Module模块化项目结构"></a>Module模块化项目结构</h2><ul><li>标准项目结构<br>  参考<br> 如果所有的状态都写在一个 js 中，这个 js 必定会很臃肿，Vuex 并不限制你的代码结构。但是它建议按以下代码<br> 结构来构建项目结构: <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│ └── ... # 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│ ├── App.vue</span><br><span class="line">│ └── ...</span><br><span class="line">└── store</span><br><span class="line">├── index.js # 我们组装模块并导出 store 的地方</span><br><span class="line">├── actions.js # 根级别的 action</span><br><span class="line">├── mutations.js # 根级别的 mutation</span><br><span class="line">└── modules</span><br><span class="line">├── cart.js # 购物车模块</span><br><span class="line">└── products.js # 产品模块</span><br></pre></td></tr></table></figure></li><li>重构项目结构<ol><li>在 store下创建 modules 目录，该目录下创建 home.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">count: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters =&#123;</span><br><span class="line">desc(state) &#123;</span><br><span class="line">    <span class="keyword">if</span>(state.count &lt; <span class="number">50</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">'吃饭'</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state.count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">'睡觉'</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">'打豆豆'</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">increment(state, n) &#123; <span class="comment">// n 为载荷</span></span><br><span class="line">    <span class="comment">// state.count ++</span></span><br><span class="line">    state.count += n</span><br><span class="line">&#125;,</span><br><span class="line">decrement(state) &#123;</span><br><span class="line">    state.count --</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    add(context) &#123;</span><br><span class="line">    <span class="comment">// 触发 mutations 中的 increment 改变 state</span></span><br><span class="line">    context.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">decrement(&#123;commit, state&#125;) &#123; <span class="comment">// 按需传值</span></span><br><span class="line">    commit(<span class="string">'decrement'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 存放状态（共享属性）</span></span><br><span class="line">state,</span><br><span class="line"><span class="comment">//派生属性</span></span><br><span class="line">getters,</span><br><span class="line"><span class="comment">// 改变 state 状态</span></span><br><span class="line">mutations,</span><br><span class="line">actions</span><br></pre></td></tr></table></figure></li><li>修改 store\index.js, 导入 ./modules/home.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">// 导入 Module</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">'./modules/home'</span></span><br><span class="line"><span class="comment">// 引入 Vuex 插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123; <span class="comment">// 注意V 和 S都是大写字母</span></span><br><span class="line">modules: &#123;</span><br><span class="line">home <span class="comment">// home: home</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li>正常访问, 与重构前一样</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuex-概述&quot;&gt;&lt;a href=&quot;#Vuex-概述&quot; class=&quot;headerlink&quot; title=&quot;Vuex 概述&quot;&gt;&lt;/a&gt;Vuex 概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;官方文档：&lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; ta
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统----修改密码模块</title>
    <link href="http://yoursite.com/2020/02/08/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%A8%A1%E5%9D%97%20/"/>
    <id>http://yoursite.com/2020/02/08/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%A8%A1%E5%9D%97%20/</id>
    <published>2020-02-07T16:00:00.000Z</published>
    <updated>2020-02-08T11:52:42.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="难点-Element-自定义校验器实现Axios校验密码"><a href="#难点-Element-自定义校验器实现Axios校验密码" class="headerlink" title="难点:Element 自定义校验器实现Axios校验密码"></a>难点:Element 自定义校验器实现Axios校验密码</h1><h2 id="当前用户回显"><a href="#当前用户回显" class="headerlink" title="当前用户回显"></a>当前用户回显</h2><ul><li>在 data 选项添加 user 获取用户信息<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    ......</span><br><span class="line">  <span class="comment">// user 获取用户信息</span></span><br><span class="line">user: <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'msm-user'</span>)),</span><br></pre></td></tr></table></figure></li><li>在模板相应地方添加代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dropdown-link"</span>&gt;</span><br><span class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-user"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    &#123;&#123;user.name&#125;&#125;</span><br><span class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-arrow-down el-icon--right"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h2 id="EasyMock-添加模拟接口"><a href="#EasyMock-添加模拟接口" class="headerlink" title="EasyMock 添加模拟接口"></a>EasyMock 添加模拟接口</h2><ul><li>添加原密码校验接口<br>输入原密码，失去焦点后异步发送请求校验是否正确, 给服务接口传入用户id和密码<blockquote><p>请求URL： /user/pwd<br>请求方式： post<br>请求参数 : userId, password<br>描述：校验密码是否正确<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"密码正确"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加修改密码接口<br>点击提交, 将用户id和新密码提交给后台接口<blockquote><p>请求URL： /user/pwd<br>请求方式： put<br>请求参数 : userId, password<br>描述：修改密码接口<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"密码修改成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Api-调用接口"><a href="#Api-调用接口" class="headerlink" title="Api 调用接口"></a>Api 调用接口</h2>新建 api\password.js 文件, 调用服务接口实现如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验密码，userId,passsword旧密码</span></span><br><span class="line">    checkPwd(userId,passsword)&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            url:<span class="string">'/user/pwd'</span>,</span><br><span class="line">            method:<span class="string">'post'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                userId,</span><br><span class="line">                passsword</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//修改密码，userId，password新密码</span></span><br><span class="line">    updatePwd(userId,passsword)&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            url:<span class="string">'/user/pwd'</span>,</span><br><span class="line">            method:<span class="string">'post'</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                userId,</span><br><span class="line">                passsword</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h2 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h2></li></ul></li><li>打开头部组件 , 添加修改密码表单组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改密码弹出的部分 ----------------------------------------------------&gt;</span><br><span class="line">    &lt;el-dialog title=<span class="string">"修改密码"</span> :visible.sync=<span class="string">"dialogFormVisible"</span> width=<span class="string">"400px "</span> &gt;</span><br><span class="line">      &lt;el-form :model=<span class="string">"ruleForm"</span> status-icon :rules=<span class="string">"rules"</span> ref=<span class="string">"ruleForm"</span> label-width=<span class="string">"100px"</span> &gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"原密码"</span> prop=<span class="string">"oldPass"</span>&gt;</span><br><span class="line">          &lt;el-input type=<span class="string">"password"</span> v-model=<span class="string">"ruleForm.oldPass"</span> autocomplete=<span class="string">"off"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="新密码" prop="newPass" autocomplete="off"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-input v-model.number="ruleForm.newPass"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="确认密码" prop="checkPass"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-input type="password" v-model="ruleForm.checkPass" autocomplete="off"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">          &lt;el-button type="primary" @click="submitForm('ruleForm')"&gt;提交&lt;/</span>el-button&gt;</span><br><span class="line">          &lt;el-button @click=<span class="string">"resetForm('ruleForm')"</span>&gt;重置&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>el-form-item&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-dialog&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure></li><li>data 选项中初始化属性值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dialogFormVisible: <span class="literal">false</span>,</span><br><span class="line">    ruleForm: &#123;</span><br><span class="line">      oldPass: <span class="string">""</span>,</span><br><span class="line">      newPass: <span class="string">""</span>,</span><br><span class="line">      checkPass: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在 handleCommand 方法中调用 handlePwd 抽取了上面 退出系统 逻辑代码为单独模块代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  methods: &#123;</span><br><span class="line">    handleCommand(command) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">          <span class="comment">//打开修改密码窗口</span></span><br><span class="line">          <span class="keyword">this</span>.handlePwd();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">          <span class="comment">//退出系统</span></span><br><span class="line">          <span class="keyword">this</span>.handlelogout();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//退出系统</span></span><br><span class="line">    handlelogout() &#123;</span><br><span class="line">      logout(localStorage.getItem(localStorage.getItem(<span class="string">"msm-token"</span>))).then(</span><br><span class="line">        response =&gt; &#123;</span><br><span class="line">          <span class="keyword">const</span> resp = response.data;</span><br><span class="line">          <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">            <span class="comment">//推出成功</span></span><br><span class="line">            <span class="comment">// 清除本地数据</span></span><br><span class="line">            localStorage.removeItem(<span class="string">"msm-token"</span>);</span><br><span class="line">            localStorage.removeItem(<span class="string">"msm-user"</span>);</span><br><span class="line">            <span class="comment">//回到登录页面</span></span><br><span class="line">            <span class="keyword">this</span>.$router.push(<span class="string">"/login"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">              message: resp.message,</span><br><span class="line">              type: <span class="string">"warning"</span>,</span><br><span class="line">              duration: <span class="number">500</span> <span class="comment">//弹出停留时间</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">+ 添加 handlePwd 方法, 打开修改密码 窗口</span><br><span class="line">  ~~~js</span><br><span class="line">  <span class="comment">//打开修改密码窗口</span></span><br><span class="line">    handlePwd() &#123;</span><br><span class="line">      <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">"ruleForm"</span>].resetFields();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>表单重置按钮<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=<span class="string">"$refs['ruleForm'].resetFields()"</span>&gt;重置&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li>添加 submitForm 方法, 提交修改密码表单、<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交修改密码</span></span><br><span class="line">  submitForm(formName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="comment">// 验证通过，提交添加</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证不通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="校验密码"><a href="#校验密码" class="headerlink" title="校验密码"></a>校验密码</h2>输入原密码，失去焦点后异步发送请求校验是否正确, 给服务接口传入用户名和密码</li><li>在 data 选项添加 user 获取用户信息 和 rules 属性中添加 校验规则<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">    oldPass: [</span><br><span class="line">      &#123;</span><br><span class="line">        required: <span class="literal">true</span>, <span class="comment">//必须输入</span></span><br><span class="line">        message: <span class="string">"原密码不能为空"</span>, <span class="comment">//下方的弹出信息</span></span><br><span class="line">        trigger: <span class="string">"blur"</span> <span class="comment">//失去焦点时</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">validator</span>: validateOldPass, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    newPass: [</span><br><span class="line">      &#123;</span><br><span class="line">        required: <span class="literal">true</span>, <span class="comment">//必须输入</span></span><br><span class="line">        message: <span class="string">"新密码不能为空"</span>, <span class="comment">//下方的弹出信息</span></span><br><span class="line">        trigger: <span class="string">"blur"</span> <span class="comment">//失去焦点时</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    checkPass: [</span><br><span class="line">      &#123;</span><br><span class="line">        required: <span class="literal">true</span>, <span class="comment">//必须输入</span></span><br><span class="line">        message: <span class="string">"确认新密码不能为空"</span>, <span class="comment">//下方的弹出信息</span></span><br><span class="line">        trigger: <span class="string">"blur"</span> <span class="comment">//失去焦点时</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">validator</span>: validatenewPass, <span class="attr">trigger</span>: <span class="string">"change"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>在 data 选项中的 return {} 上面添加自定校验<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验原密码</span></span><br><span class="line">  <span class="keyword">const</span> validateOldPass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// alert(this.user.id)</span></span><br><span class="line">    passwordApi.checkPwd(<span class="keyword">this</span>.user.id, value).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//提示信息</span></span><br><span class="line">      <span class="keyword">const</span> resp = response.data;</span><br><span class="line">      <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">        message: resp.message,</span><br><span class="line">        type: resp.flag ? <span class="string">"success"</span> : <span class="string">"warning"</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(resp.message));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//校验确认密码是否为一致</span></span><br><span class="line">  <span class="keyword">const</span> validatenewPass = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">this</span>.ruleForm.newPass) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"两次输入密码不一致!"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  ~</span><br></pre></td></tr></table></figure><h2 id="提交新密码"><a href="#提交新密码" class="headerlink" title="提交新密码"></a>提交新密码</h2></li><li>提交按钮<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"submitForm('ruleForm')"</span>&gt;提交&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">~</span></span><br></pre></td></tr></table></figure></li><li>提交修改密码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交修改密码</span></span><br><span class="line">  submitForm(formName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        passwordApi</span><br><span class="line">          .updatePwd(<span class="keyword">this</span>.user.id, <span class="keyword">this</span>.ruleForm.checkPass)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//提示信息</span></span><br><span class="line">            <span class="keyword">const</span> resp = response.data;</span><br><span class="line">            <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">              message: resp.message,</span><br><span class="line">              type: resp.flag ? <span class="string">"success"</span> : <span class="string">"warning"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">              <span class="comment">// 修改成功, 清除本地数据, 重新登录</span></span><br><span class="line">              <span class="keyword">this</span>.handlelogout();</span><br><span class="line">              <span class="comment">// 关闭窗口</span></span><br><span class="line">              <span class="keyword">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证不通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;难点-Element-自定义校验器实现Axios校验密码&quot;&gt;&lt;a href=&quot;#难点-Element-自定义校验器实现Axios校验密码&quot; class=&quot;headerlink&quot; title=&quot;难点:Element 自定义校验器实现Axios校验密码&quot;&gt;&lt;/a&gt;难点
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统登录----商品管理模块</title>
    <link href="http://yoursite.com/2020/02/07/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F---%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/07/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F---%E5%95%86%E5%93%81%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-06T16:00:00.000Z</published>
    <updated>2020-02-07T12:47:07.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要掌握技术点：父子组件通信"><a href="#主要掌握技术点：父子组件通信" class="headerlink" title="主要掌握技术点：父子组件通信"></a>主要掌握技术点：父子组件通信</h1><p>大致流程等同于会员管理和供应商管理模块<br> 不同点:</p><ul><li><p>上方搜索框供应商点击弹出窗口选择供应商而非手动输入搜索模糊查询</p></li><li><p>重点掌握：弹出窗口选择供应商，并回显供应商信息。通过父子组件通信。</p><h1 id="上方搜索框选择供应商模块具体实现流程"><a href="#上方搜索框选择供应商模块具体实现流程" class="headerlink" title="上方搜索框选择供应商模块具体实现流程"></a>上方搜索框选择供应商模块具体实现流程</h1></li><li><p>供应商搜索框设置只读属性</p></li><li><p>将 supplier\index.vue 导入 goods\index.vue 作为子组件使用。</p><ol><li>Supplier 作为子组件</li><li>注册子组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> goodsApi <span class="keyword">from</span> <span class="string">'@/api/goods'</span></span><br><span class="line"><span class="comment">// Supplier 作为子组件</span></span><br><span class="line"><span class="keyword">import</span> Supplier <span class="keyword">from</span> <span class="string">'@/views/supplier'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 不要忘记注册</span></span><br><span class="line">components: &#123; Supplier &#125;,</span><br><span class="line">...</span><br><span class="line">。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>点击弹出的选择供应商窗口</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 供应商对话框 --&gt;</span><br><span class="line">    &lt;el-dialog title=<span class="string">"选择供应商"</span> :visible.sync=<span class="string">"dialogSupplierVisible"</span> width=<span class="string">"500px"</span>&gt;</span><br><span class="line">    &lt;supplier&gt;<span class="xml"><span class="tag">&lt;/<span class="name">supplier</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/el-dialog&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 goods\index.vue 组件的 data 选项中定义 dialogSupplierVisible 控制对话框</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">    currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">    pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">    searchMap: &#123;</span><br><span class="line">        name: <span class="string">""</span>,</span><br><span class="line">        code: <span class="string">""</span>,</span><br><span class="line">        supplierName: <span class="string">""</span></span><br><span class="line">    &#125;, <span class="comment">// 条件查询的绑定字段值</span></span><br><span class="line">    dialogSupplierVisible: <span class="literal">false</span> <span class="comment">// 控制供应商对话框</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>修改供应商输入框</p><ul><li>readonly 只读框</li><li>@click.native 点击事件。<br>注意： el-input 是组件，要在组件元素监听原生事件，需要使用 v-on:原生事件名.native=”处理函数”<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">      readonly</span><br><span class="line">      @click.native= <span class="string">"dialogSupplierVisible = true"</span></span><br><span class="line">      v-model=<span class="string">"searchMap.supplierName"</span></span><br><span class="line">      placeholder=<span class="string">"点击选择供应商"</span></span><br><span class="line">      style=<span class="string">"width: 200px;"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>供应商页面在弹出时候很多是我们不需要的, 进行优化,</p><ul><li>父组件向子组件传递数据：通过 props 声明接收<br>  向供应商 Supplier 子组件传入一个参数 isDialog , 如果是弹出窗口, 则弹出页面隐藏一些功能.</li><li>在 goods\index.vue 上的 <supplier> 组件标签上绑定属性 :isDialog=”true”<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;supplier :isDialog=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">supplier</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>在 supplier\index.vue 中通过 props 选项 声明接收 isDialog<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line"><span class="comment">// 接收父组件传递过来 的数据,通过isDialog来判断 是否为弹框</span></span><br><span class="line"><span class="comment">// 如果为 true, 则是弹框, false 就是列表</span></span><br><span class="line">isDialog: <span class="built_in">Boolean</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>搜索只要 供应商名称 ；列表只要 序号、供应商名称、联系人； 分页只要 向前、向后和页码<br>采用 v-if=“!isDialog” 来隐藏<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item prop=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;el-input v-model=<span class="string">"searchMap.name"</span> placeholder=<span class="string">"供应商名称"</span> style=<span class="string">"width: 200px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;el-form-item prop="linkman" v-if="!isDialog"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="searchMap.linkman" placeholder="联系人" style="width: 200px;"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;el-form-item prop="phone" v-if="!isDialog"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="searchMap.phone" placeholder="联系电话" style="width: 200px;"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br></pre></td></tr></table></figure>分页隐藏<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">  :layout=<span class="string">"!isDialog ? 'total, sizes, prev, pager, next, jumper': 'prev, pager, next,jumper'"</span></span><br><span class="line"></span><br><span class="line">  @size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">  @current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">  :current-page=<span class="string">"currentPage"</span></span><br><span class="line">  :page-sizes=<span class="string">"[10, 20, 50]"</span></span><br><span class="line">  :page-size=<span class="string">"pageSize"</span></span><br><span class="line">  :total=<span class="string">"total"</span></span><br><span class="line">&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>当点击列表中某一行供应商，即选中；选中的那个供应商数据传回到父组件 商品管理 中 </p><blockquote><p>参考表格单选：<br><a href="https://element.eleme.cn/#/zh-CN/component/table#dan-xuan" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/table#dan-xuan</a><br>在 supplier\index.vue 组件的 el-table 表格组件上配置 highlight-current-row 属性可实现单选；<br>通过 current-change 事件管理选中时触发的事件函数 clickCurrentChange，并传入 currentRow ，<br>oldCurrentRow 参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- highlight-current-row 激活单选行, isDialog为<span class="literal">true</span>时激活</span><br><span class="line"> @current-change 当点击某一行后,会触发这个事件,从而调用对应的函数clickCurrentChange</span><br><span class="line"> clickCurrentChange函数会接收两个参数:currentRow，oldCurrentRow</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;el-table</span><br><span class="line"> :highlight-current-row = <span class="string">"isDialog"</span></span><br><span class="line"> @current-change=<span class="string">"clickCurrentChange"</span></span><br><span class="line"> :data=<span class="string">"list"</span></span><br><span class="line"> height=<span class="string">"380"</span></span><br><span class="line"> border</span><br><span class="line"> style=<span class="string">"width: 100%"</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 supplier\index.vue 组件定义 clickCurrentChange 函数，向父组件传递点击数据。<br>  子组件向父组件传递数据：通过 $emit 触发事件的方式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 当点击某一行时,会调用这个函数进行处理</span></span><br><span class="line">clickCurrentChange(currentRow) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(currentRow);</span><br><span class="line"><span class="comment">// 点击后,要将点击的数据传递到父组件(商品管理中),</span></span><br><span class="line"><span class="comment">// 则可以通过触发父组件中的option-supplier, 触发之后 ,</span></span><br><span class="line"><span class="comment">//父组件可以在 option-supplier 这个事件对应的处理函数中进行接收数据currentRow</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"option-supplier"</span>, currentRow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在父组件 goods\index.vue 的组件元素 supplier 上绑定自定义事件 option-supplier</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dialog title=<span class="string">"选择供应商"</span> :visible.sync=<span class="string">"dialogSupplierVisible"</span> width=<span class="string">"500px"</span>&gt;</span><br><span class="line">     &lt;supplier @option-supplier=<span class="string">"optionSupplier"</span> :isDialog=<span class="string">"true"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">supplier</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/el-dialog&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在父组件 goods\index.vue 中添加 option-supplier 事件触发的函数 optionSupplier 进行回显数据</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//供应商回显</span></span><br><span class="line">optionSupplier(currentRow) &#123;</span><br><span class="line">  <span class="comment">// currentRow 子组件传递的数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"parent"</span>, currentRow);</span><br><span class="line">  <span class="keyword">this</span>.searchMap.supplierName = currentRow.name; <span class="comment">// 供应商名称</span></span><br><span class="line">  <span class="keyword">this</span>.searchMap.supplierId = currentRow.id; <span class="comment">// 供应商ID</span></span><br><span class="line">  <span class="keyword">this</span>.dialogSupplierVisible = <span class="literal">false</span>; <span class="comment">//关闭窗口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="重置功能"><a href="#重置功能" class="headerlink" title="重置功能"></a>重置功能</h1><ul><li>在 条件查询区域添加 一个 重置 按钮, 直接在上面调用重置方法, 注意 ‘searchForm’  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=<span class="string">"$refs['searchForm'].resetFields()"</span>&gt;重置&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果条件输入框有时输入不了内容, 和供应商无法重置, 在 searchMap 对象中明确属性名  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  list: [],</span><br><span class="line">  total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">  currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">  pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">  searchMap: &#123;</span><br><span class="line">    name: <span class="string">""</span>,</span><br><span class="line">    code: <span class="string">""</span>,</span><br><span class="line">    supplierName: <span class="string">""</span></span><br><span class="line">  &#125;, <span class="comment">// 条件查询的绑定字段值</span></span><br><span class="line">  dialogSupplierVisible: <span class="literal">false</span> <span class="comment">// 控制供应商对话框</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="商品新增功能"><a href="#商品新增功能" class="headerlink" title="商品新增功能"></a>商品新增功能</h1></li><li>在 src\views\goods\index.vue 中分页区域的下方，新增对话框形式表单数据模板  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新增 or 编辑页面 --&gt;</span><br><span class="line">    &lt;el-dialog title=<span class="string">"商品新增"</span> :visible.sync=<span class="string">"dialogFormVisible"</span> width=<span class="string">"500px"</span>&gt;</span><br><span class="line">    &lt;el-form</span><br><span class="line">        :rules=<span class="string">"rules"</span></span><br><span class="line">        status-icon</span><br><span class="line">        ref=<span class="string">"pojoForm"</span></span><br><span class="line">        :model=<span class="string">"pojo"</span></span><br><span class="line">        label-width=<span class="string">"100px"</span></span><br><span class="line">        label-position=<span class="string">"right"</span></span><br><span class="line">        style=<span class="string">"width: 400px;"</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-form-item label=<span class="string">"商品名称"</span> prop=<span class="string">"name"</span>&gt;</span><br><span class="line">        &lt;el-input v-model=<span class="string">"pojo.name"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="商品编码" prop="code"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="pojo.code" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="商品规格" prop="spec"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="pojo.spec" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="零售价" prop="retailPrice"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="pojo.retailPrice" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="进货价" prop="purchasePrice"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="pojo.purchasePrice" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="库存数量" prop="storageNum"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="pojo.storageNum" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-form-item label="供应商" prop="supplierId"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input</span></span><br><span class="line"><span class="regexp">            readonly</span></span><br><span class="line"><span class="regexp">            @click.native="dialogSupplierVisible = true"</span></span><br><span class="line"><span class="regexp">            v-model="pojo.supplierName"</span></span><br><span class="line"><span class="regexp">            placeholder="选择供应商"</span></span><br><span class="line"><span class="regexp">            style="width: 200px;"</span></span><br><span class="line"><span class="regexp">        &gt;&lt;/</span>el-input&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-form&gt;</span><br><span class="line">    &lt;div slot=<span class="string">"footer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog-footer"</span>&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"dialogFormVisible = false"</span>&gt;取 消&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button</span></span><br><span class="line"><span class="regexp">        type="primary"</span></span><br><span class="line"><span class="regexp">        @click=" addData('pojoForm')"</span></span><br><span class="line"><span class="regexp">        &gt;确 定&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-dialog&gt;</span><br></pre></td></tr></table></figure></li><li>data 选项中声明变量属性:<blockquote><p>pojo 提交表单对象<br>dialogFormVisible 当它为 true 弹出，false 不弹。<br>rules : 定义校验规则</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pojo: &#123;</span><br><span class="line">   id: <span class="literal">null</span>,</span><br><span class="line">   name: <span class="string">""</span>,</span><br><span class="line">   code: <span class="string">""</span>,</span><br><span class="line">   spec: <span class="string">""</span>,</span><br><span class="line">   retailPrice: <span class="number">0.0</span>,</span><br><span class="line">   purchasePrice: <span class="number">0.0</span>,</span><br><span class="line">   storageNum: <span class="number">0</span>,</span><br><span class="line">   supplierName: <span class="string">""</span>,</span><br><span class="line">   supplierId: <span class="literal">null</span></span><br><span class="line"> &#125;,</span><br><span class="line"> dialogFormVisible: <span class="literal">false</span>,</span><br><span class="line"> rules: &#123;</span><br><span class="line">   name: [</span><br><span class="line">     &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"商品名称不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">   ],</span><br><span class="line">   code: [</span><br><span class="line">     &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"商品编码不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">   ],</span><br><span class="line">   retailPrice: [</span><br><span class="line">     &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"零售价不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>在 methods 中添加 addData() 函数,提交表单数据用的  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交新增数据</span></span><br><span class="line">addData(formName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="comment">// 验证通过，提交添加</span></span><br><span class="line">    alert(<span class="string">'Add submit!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 验证不通过</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在 template 中的查询按钮旁边添加一个 新增 按钮，用于打开新增会员对话框 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"primary"</span> icon=<span class="string">"el-icon-edit"</span> @click=<span class="string">"handleAdd"</span>&gt;新增&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中添加 handleAdd() 函数, 打开新增对话框 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开新增窗口</span></span><br><span class="line">handleAdd() &#123;</span><br><span class="line">  <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行</span></span><br><span class="line">    <span class="comment">// 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调用resetFields方法，重置表单和清除样式</span></span><br><span class="line">    <span class="keyword">this</span>.$refs[<span class="string">"pojoForm"</span>].resetFields();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>测试发现，点击选择供应商，数据没有回显，实际上是回显到搜索框(searchMap)了，<br>  解决：定义一个中间变量 isEdit: false, 打开时赋值 true, 然后在回显处，判断回显 searchMap还是 pojo<ul><li>修改编辑窗口的供应商名称输入框绑定一个处理函数 editOptionSupplier<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label=<span class="string">"供应商名称"</span> prop=<span class="string">"supplierName"</span>&gt;</span><br><span class="line">&lt;el-input readonly</span><br><span class="line">@click.native=<span class="string">"editOptionSupplier"</span></span><br><span class="line">v-model=<span class="string">"pojo.supplierName"</span></span><br><span class="line">placeholder=<span class="string">"选择供应商"</span> style=<span class="string">"width: 200px;"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br></pre></td></tr></table></figure></li><li>data 中声明一个 isEdit: false ， 在 methods 中定义函数 editOptionSupplier ，修改 optionSupplier 函数作判断赋值。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑窗口打开供应商</span></span><br><span class="line"> editOptionSupplier() &#123;</span><br><span class="line">   <span class="keyword">this</span>.isEdit = <span class="literal">true</span>; <span class="comment">// 是编辑窗口</span></span><br><span class="line">   <span class="keyword">this</span>.dialogSupplierVisible = <span class="literal">true</span>;</span><br><span class="line"> &#125;,</span><br><span class="line"> optionSupplier(current) &#123;</span><br><span class="line">   <span class="comment">// current 子组件传递的数据</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"goods"</span>, current);</span><br><span class="line">   <span class="comment">// 判断是否编辑</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.isEdit) &#123;</span><br><span class="line">     <span class="keyword">this</span>.pojo.supplierName = current.name; <span class="comment">//供应商名称</span></span><br><span class="line">     <span class="keyword">this</span>.pojo.supplierId = current.id; <span class="comment">// 供应商 id</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>.searchMap.supplierName = current.name; <span class="comment">//供应商名称</span></span><br><span class="line">     <span class="keyword">this</span>.searchMap.supplierId = current.id; <span class="comment">// 供应商 id</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.isEdit = <span class="literal">false</span>; <span class="comment">// 注意重新赋值 false</span></span><br><span class="line">   <span class="keyword">this</span>.dialogSupplierVisible = <span class="literal">false</span>; <span class="comment">// 关闭窗口</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>表单数据提交<ul><li>EasyMock 添加新增商品模拟接口<blockquote><p>请求URL： /goods<br>请求方式： post<br>描述：新增商品<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"新增成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Api 调用接口<ol><li>src\api\goods.js 导出的默认对象中，添加调用新增接口的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 新增</span></span><br><span class="line">add(pojo) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/goods'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        data: pojo</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\goods\index.vue 中的 addData 方法中提交数据，代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 提交新增数据</span></span><br><span class="line">addData(formName) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">    <span class="comment">// 验证通过，提交添加</span></span><br><span class="line">    goodsApi.add(<span class="keyword">this</span>.pojo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> resp = response.data;</span><br><span class="line">        <span class="keyword">if</span> (resp) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">        <span class="keyword">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证不通过</span></span><br><span class="line">        <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: resp.message,</span><br><span class="line">            type: <span class="string">"warning"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="修改和删除参考其他模块"><a href="#修改和删除参考其他模块" class="headerlink" title="修改和删除参考其他模块"></a>修改和删除参考其他模块</h1><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><h2 id="新增-修改实际引用的同一模板，-pojo-id-undefined-值为true是新增，有id说明是更新。（确认按钮点击事件）"><a href="#新增-修改实际引用的同一模板，-pojo-id-undefined-值为true是新增，有id说明是更新。（确认按钮点击事件）" class="headerlink" title="新增+修改实际引用的同一模板， pojo.id === undefined 值为true是新增，有id说明是更新。（确认按钮点击事件）"></a>新增+修改实际引用的同一模板， pojo.id === undefined 值为true是新增，有id说明是更新。（确认按钮点击事件）</h2>前提，pojo 提交表单对象中定义好id：null<br><img src="https://i.loli.net/2020/02/07/hitWYRTBPm93HSL.png" alt="addorupdate.png"></li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;主要掌握技术点：父子组件通信&quot;&gt;&lt;a href=&quot;#主要掌握技术点：父子组件通信&quot; class=&quot;headerlink&quot; title=&quot;主要掌握技术点：父子组件通信&quot;&gt;&lt;/a&gt;主要掌握技术点：父子组件通信&lt;/h1&gt;&lt;p&gt;大致流程等同于会员管理和供应商管理模块&lt;br
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统登录----供应商管理模块</title>
    <link href="http://yoursite.com/2020/02/06/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F---%E4%BE%9B%E5%BA%94%E5%95%86%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/06/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F---%E4%BE%9B%E5%BA%94%E5%95%86%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-05T16:00:00.000Z</published>
    <updated>2020-02-06T12:45:42.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="供应商数据列表的回显"><a href="#供应商数据列表的回显" class="headerlink" title="供应商数据列表的回显"></a>供应商数据列表的回显</h1><ul><li>数据列表添加模拟接口<blockquote><p>请求URL： /supplier/list<br>请求方式： get<br>描述：供应商数据列表<br>mock.js 配置：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line"><span class="string">"data|20"</span>: [&#123;</span><br><span class="line"><span class="string">"id|+1"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"@ctitle"</span>,</span><br><span class="line"><span class="string">"linkman"</span>: <span class="string">"@cname"</span>,</span><br><span class="line"><span class="string">"mobile|11"</span>: <span class="string">"@integer(0, 9)"</span>, <span class="comment">// 11个数字0-9间的数字</span></span><br><span class="line"><span class="string">"remark"</span>: <span class="string">"@csentence(5, 15)"</span>,</span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>调用列表接口<ol><li>在 src/api 下创建 supplier.js , 调用接口代码如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 获取列表</span></span><br><span class="line">getList()&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url:<span class="string">'/supplier/list'</span>,</span><br><span class="line">        method:<span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\supplier\index.vue 中, 添加 JS 代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> supplierApi <span class="keyword">from</span> <span class="string">'@/api/supplier'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    list: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 钩子函数获取数据</span></span><br><span class="line">created () &#123;</span><br><span class="line"><span class="keyword">this</span>.fetchData()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        fetchData () &#123;</span><br><span class="line">            supplierApi.getList().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(response.data.data)</span></span><br><span class="line">            <span class="keyword">this</span>.list = response.data.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>列表模板<ol><li>修改 src\views\supplier\index.vue ，编写模板代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;!-- 列表 --&gt;</span><br><span class="line">&lt;el-table :data=<span class="string">"list"</span> height=<span class="string">"380"</span> border style=<span class="string">"width: 100%"</span> &gt;</span><br><span class="line">&lt;el-table-column type=<span class="string">"index"</span> label=<span class="string">"序号"</span> width=<span class="string">"60"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;el-table-column prop=<span class="string">"name"</span> label=<span class="string">"供应商名称"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;el-table-column prop=<span class="string">"linkman"</span> label=<span class="string">"联系人"</span> width=<span class="string">"120"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;el-table-column prop=<span class="string">"mobile"</span> label=<span class="string">"联系电话"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;el-table-column prop=<span class="string">"remark"</span> label=<span class="string">"备注"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;el-table-column label=<span class="string">"操作"</span> width=<span class="string">"150"</span>&gt;</span><br><span class="line">&lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">&lt;el-button size=<span class="string">"mini"</span> @click=<span class="string">"handleEdit(scope.row.id)"</span>&gt;编辑&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-button size="mini" type="danger" @click="handleDelete(scope.row.id)"&gt;删除&lt;/</span>el-button&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-table-column&gt;</span><br><span class="line">&lt;<span class="regexp">/el-table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中添加 handleEdit 编辑和 handleDele 删除方法，后面需要使用。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">。。。</span><br><span class="line">。。。,</span><br><span class="line">handleEdit(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'编辑'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">handleDele(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="下方分页功能"><a href="#下方分页功能" class="headerlink" title="下方分页功能"></a>下方分页功能</h1></li></ol></li><li>EasyMock 添加商品分页模拟接口<blockquote><p>请求URL： /supplier/list/search/{page}/{size}<br>请求方式： post<br>描述：供应商列表数据分页<br>mock.js 配置：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line">    <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"total"</span>: <span class="string">"@integer(100,200)"</span>, <span class="comment">// 查询出来的总记录数</span></span><br><span class="line">    <span class="string">"rows|10"</span>: [&#123; <span class="comment">// 返回当前页的记录数 10 条, 即每页显示 10 条记录</span></span><br><span class="line">    <span class="string">"id|+1"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"@ctitle"</span>,</span><br><span class="line">    <span class="string">"linkman"</span>: <span class="string">"@cname"</span>,</span><br><span class="line">    <span class="string">"mobile|11"</span>: <span class="string">"@integer(0, 9)"</span>, <span class="comment">// 11个数字0-9间的数字</span></span><br><span class="line">    <span class="string">"remark"</span>: <span class="string">"@csentence(5, 15)"</span></span><br><span class="line">    &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>分页功能api调用接口<ol><li>修改 src\api 下的 supplier.js , 在导出的默认对象中，增加分页查询方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询,</span></span><br><span class="line">search(page, size, searchMap) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/supplier/list/search/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;size&#125;</span>`</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        data: searchMap</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\supplier\index.vue 中, 添加 JS 代码如下：<br>声明分页属性， 调用 getList 改为调用 search 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> supplierApi <span class="keyword">from</span> <span class="string">'@/api/supplier'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        list: [],</span><br><span class="line">        total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">        currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">        pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">        searchMap: &#123;</span><br><span class="line">        name: <span class="string">''</span>,</span><br><span class="line">        linkman: <span class="string">''</span>,</span><br><span class="line">        mobile: <span class="string">''</span></span><br><span class="line">        &#125;, <span class="comment">// 条件查询的绑定字段值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    fetchData () &#123;</span><br><span class="line">        supplierApi.search(<span class="keyword">this</span>.currentPage, <span class="keyword">this</span>.pageSize, <span class="keyword">this</span>.searchMap).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reqs = response.data</span><br><span class="line">        <span class="keyword">this</span>.total = reqs.data.total</span><br><span class="line">        <span class="keyword">this</span>.list = reqs.data.rows</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.list)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">。。。</span><br><span class="line">。。。</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>分页模板<ol><li>修改 src\views\supplier\index.vue ， template 标签中添加页面模板代码： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分页，添加在div里面 --&gt;</span><br><span class="line">&lt;el-pagination</span><br><span class="line">@size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">@current-change=<span class="string">"handleCurrentChange"</span></span><br><span class="line">:current-page=<span class="string">"currentPage"</span></span><br><span class="line">:page-sizes=<span class="string">"[10, 20, 50]"</span></span><br><span class="line">:page-size=<span class="string">"pageSize"</span></span><br><span class="line">layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">:total=<span class="string">"total"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-pagination&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中添加方法 handleSizeChange 和 handleCurrentChange 动态赋值与刷新列表 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pageSize = val</span><br><span class="line">    <span class="keyword">this</span>.fetchData()</span><br><span class="line">&#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentPage = val</span><br><span class="line">    <span class="keyword">this</span>.fetchData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="搜索框部分"><a href="#搜索框部分" class="headerlink" title="搜索框部分"></a>搜索框部分</h1></li></ol></li><li>上方搜索框部分<ol><li>修改 src\views\supplier\index.vue ，增加条件查询模板代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 上方区域 --&gt;</span><br><span class="line">&lt;el-form ref=<span class="string">"searchForm"</span> :inline=<span class="string">"true"</span> :model=<span class="string">"searchMap"</span> style=<span class="string">"margin-top: 20px;"</span>&gt;</span><br><span class="line">  &lt;!-- 有prop才可以重置 --&gt;</span><br><span class="line">  &lt;el-form-item prop=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;el-input v-model=<span class="string">"searchMap.name"</span> placeholder=<span class="string">"供应商名称"</span> style=<span class="string">"width: 200px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;el-form-item prop="linkman"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="searchMap.linkman" placeholder="联系人" style="width: 200px;"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;el-form-item prop="phone"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="searchMap.phone" placeholder="联系电话" style="width: 200px;"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-button type="primary" icon="el-icon-search" @click="fetchData"&gt;查询&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"resetForm('searchForm')"</span>&gt;重置&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-button type="primary" icon="el-icon-edit" @click="handleAdd"&gt;新增&lt;/</span>el-button&gt;</span><br><span class="line">  &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-form&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li>重置功能<br>  methods 选项中添加重置处理方法 resetForm<br>  注意: 在 el-form-item 标签属性 prop 上, 指定了字段名, 重置才会生效  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单重置，</span></span><br><span class="line"><span class="comment">// 在 el-form-item 标签属性 prop 上, 指定了字段名, 重置才会生效</span></span><br><span class="line">resetForm(formName) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs[formName].resetFields();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="新增供应商信息"><a href="#新增供应商信息" class="headerlink" title="新增供应商信息"></a>新增供应商信息</h1></li><li>添加模板 在 src\views\supplier\index.vue 中分页区域的下方，新增对话框形式表单数据模板<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 点击新增弹出的页面 --&gt;</span><br><span class="line">&lt;el-dialog title=<span class="string">"供应商编辑"</span> :visible.sync=<span class="string">"dialogFormVisible"</span> width=<span class="string">"500px"</span>&gt;</span><br><span class="line">&lt;el-form</span><br><span class="line">    :rules=<span class="string">"rules"</span></span><br><span class="line">    status-icon</span><br><span class="line">    ref=<span class="string">"pojoForm"</span></span><br><span class="line">    :model=<span class="string">"pojo"</span></span><br><span class="line">    label-width=<span class="string">"100px"</span></span><br><span class="line">    label-position=<span class="string">"right"</span></span><br><span class="line">    style=<span class="string">"width: 400px;"</span></span><br><span class="line">&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">"供应商名称"</span> prop=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;el-input v-model=<span class="string">"pojo.name"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="联系人" prop="linkman"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="pojo.linkman" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="联系电话" prop="mobile"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="pojo.mobile" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="备注" prop="remark"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input</span></span><br><span class="line"><span class="regexp">        v-model="pojo.remark"</span></span><br><span class="line"><span class="regexp">        type="textarea"</span></span><br><span class="line"><span class="regexp">        :autosize="&#123; minRows: 2, maxRows: 4&#125;"</span></span><br><span class="line"><span class="regexp">        placeholder="请输入地址"</span></span><br><span class="line"><span class="regexp">    /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-form&gt;</span><br><span class="line">&lt;div slot=<span class="string">"footer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog-footer"</span>&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"dialogFormVisible = false"</span>&gt;取 消&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-button</span></span><br><span class="line"><span class="regexp">    type="primary"</span></span><br><span class="line"><span class="regexp">    @click="pojo.id === undefined ? addData('pojoForm'):updateData('pojoForm')"</span></span><br><span class="line"><span class="regexp">    &gt;确 定&lt;/</span>el-button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-dialog&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li>data 选项中声明变量属性:<pre><code>&gt; pojo 提交表单对象&gt; dialogFormVisible 当它为 true 弹出，false 不弹。&gt; rules : 定义校验规则</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">    currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">    pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">    searchMap: &#123;</span><br><span class="line">      name: <span class="string">""</span>,</span><br><span class="line">      linkman: <span class="string">""</span>,</span><br><span class="line">      mobile: <span class="string">""</span></span><br><span class="line">    &#125;, <span class="comment">// 条件查询的绑定字段值</span></span><br><span class="line">    pojo: &#123;</span><br><span class="line">      id: <span class="literal">null</span>,</span><br><span class="line">      name: <span class="string">""</span>,</span><br><span class="line">      linkman: <span class="string">""</span>,</span><br><span class="line">      mobile: <span class="string">""</span>,</span><br><span class="line">      remark: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    dialogFormVisible: <span class="literal">false</span>,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      name: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"供应商名称不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      linkman: [</span><br><span class="line">        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"联系人不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在 methods 中添加 addData() 函数,提交表单数据用的  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 提交新增数据</span></span><br><span class="line">    addData(formName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="comment">// 验证通过，提交添加</span></span><br><span class="line">            alert(<span class="string">'Add submit!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 验证不通过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">+  在 methods 中添加 handleAdd() 函数, 打开新增对话框</span><br><span class="line">    ~~~js</span><br><span class="line">    handleAdd() &#123;</span><br><span class="line">      <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行</span></span><br><span class="line">        <span class="comment">// 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调用resetFields方法，重置表单和清除样式</span></span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">"pojoForm"</span>].resetFields();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li>表单数据提交<ul><li>EasyMock 添加新增供应商模拟接口<blockquote><p>请求URL： /supplier<br>请求方式： post<br>描述：新增供应商<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"新增成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Api 调用接口<ol><li>src\api\supplier.js 导出的默认对象中，添加调用新增接口的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增</span></span><br><span class="line">add(pojo) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/supplier'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        data: pojo</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\supplier\index.vue 中的 addData 方法中提交数据，代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交新增数据</span></span><br><span class="line">   addData(formName) &#123;</span><br><span class="line">   <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">       <span class="comment">// 验证通过，提交添加</span></span><br><span class="line">       supplierApi.add(<span class="keyword">this</span>.pojo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> resp = response.data;</span><br><span class="line">           <span class="keyword">if</span> (resp) &#123;</span><br><span class="line">           <span class="keyword">this</span>.fetchData();</span><br><span class="line">           <span class="keyword">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 验证不通过</span></span><br><span class="line">           <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">               message: resp.message,</span><br><span class="line">               type: <span class="string">"warning"</span></span><br><span class="line">           &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><h1 id="具体信息编辑"><a href="#具体信息编辑" class="headerlink" title="具体信息编辑"></a>具体信息编辑</h1></li></ol></li></ul></li><li>定义接口<ul><li>ID 查询数据接口<blockquote><p>请求URL： /supplier/{id}<br>请求方式： get<br>描述：供应商 ID 查询数据接口<br>mock.js 配置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line">    <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"id|+1"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"@ctitle"</span>,</span><br><span class="line">    <span class="string">"linkman"</span>: <span class="string">"@cname"</span>,</span><br><span class="line">    <span class="string">"mobile|11"</span>: <span class="string">"@integer(0, 9)"</span>, <span class="comment">// 11个数字0-9间的数字</span></span><br><span class="line">    <span class="string">"remark"</span>: <span class="string">"@csentence(5, 15)"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li>提交修改数据接口<blockquote><p>请求URL： /supplier/{id}<br>说明：id 是修改的那条数据<br>请求方式： put<br>描述：供应商数据更新<br>mock.js 配置：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">'message'</span>: <span class="string">"修改成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li>Api 调用接口<ol><li>src\api\supplier.js 导出的默认对象中，添加ID查询方法 getById 和 更新方法 update<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">getById(id) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/supplier/<span class="subst">$&#123;id&#125;</span>`</span>, <span class="comment">// 反单引号 ``</span></span><br><span class="line">        method: <span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">update(pojo) &#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/supplier/<span class="subst">$&#123;pojo.id&#125;</span>`</span>, <span class="comment">// 反单引号 ``</span></span><br><span class="line">        method: <span class="string">'put'</span>, <span class="comment">// put 方式提交</span></span><br><span class="line">        data: pojo</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在 src\views\supplier\index.vue 中的 handleEdit 方法（打开编辑窗口）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开编辑窗口</span></span><br><span class="line">handleEdit(id) &#123;</span><br><span class="line">  <span class="comment">// 重用打开新增窗口方法, 不要少了 this</span></span><br><span class="line">  <span class="keyword">this</span>.handleAdd();</span><br><span class="line">  <span class="comment">// 查询数据</span></span><br><span class="line">  supplierApi.getById(id).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resp = response.data;</span><br><span class="line">    <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pojo = resp.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>修改对话框中的确认按钮点击事件， pojo.id === null 值为true是新增，有id说明是更新。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"pojo.id === null ? addData('pojoForm'): updateData('pojoForm')"</span>&gt;确 定&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li>提交更新数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">updateData(formName) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 验证通过，提交</span></span><br><span class="line">      supplierApi.update(<span class="keyword">this</span>.pojo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> resp = response.data;</span><br><span class="line">        <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">          <span class="keyword">this</span>.fetchData(); <span class="comment">// 刷新列表数据</span></span><br><span class="line">          <span class="keyword">this</span>.dialogFormVisible = <span class="literal">false</span>; <span class="comment">// 关闭窗口</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败, 弹出提示</span></span><br><span class="line">          <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: resp.message,</span><br><span class="line">            type: <span class="string">"warning"</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 验证不通过</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="供应商删除"><a href="#供应商删除" class="headerlink" title="供应商删除"></a>供应商删除</h1></li></ol></li><li>EasyMock 添加模拟接口<blockquote><p>请求URL： /supplier/{id}<br>请求方式： delete<br>描述：根据供应商 ID 删除<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"message"</span>: <span class="string">"删除成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Api 调用接口<ol><li>src\api\supplier.js 导出的默认对象中，添加 deleteById 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">    deleteById(id) &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            url: <span class="string">`/supplier/<span class="subst">$&#123;id&#125;</span>`</span>, <span class="comment">// 反单引号 ``</span></span><br><span class="line">            method: <span class="string">'delete'</span>, <span class="comment">// delete 方式提交</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\supplier\index.vue 中的 handleDele 方法做如下修改：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除功能</span></span><br><span class="line">    handleDelete(id) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"删除"</span>, id);</span><br><span class="line">    <span class="keyword">this</span>.$confirm(<span class="string">"确认删除这条记录吗？"</span>, <span class="string">"提示"</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">"确定"</span>,</span><br><span class="line">        cancelButtonText: <span class="string">"取消"</span>,</span><br><span class="line">        type: <span class="string">"warning"</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 确认</span></span><br><span class="line">        supplierApi.deleteById(id).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> resp = response.data;</span><br><span class="line">            <span class="comment">//提示信息</span></span><br><span class="line">            <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            type: resp.flag ? <span class="string">"success"</span> : <span class="string">"error"</span>,</span><br><span class="line">            message: resp.message</span><br><span class="line">            &#125;); </span><br><span class="line">            <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">            <span class="comment">// 删除成功，刷新列表</span></span><br><span class="line">            <span class="keyword">this</span>.fetchData();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 取消删除，不理会</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;供应商数据列表的回显&quot;&gt;&lt;a href=&quot;#供应商数据列表的回显&quot; class=&quot;headerlink&quot; title=&quot;供应商数据列表的回显&quot;&gt;&lt;/a&gt;供应商数据列表的回显&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;数据列表添加模拟接口&lt;blockquote&gt;
&lt;p&gt;请求URL：
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统----登录+会员管理模块</title>
    <link href="http://yoursite.com/2020/02/05/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E7%99%BB%E5%BD%95+%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/05/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F----%E7%99%BB%E5%BD%95+%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-04T16:55:00.000Z</published>
    <updated>2020-02-06T12:45:50.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正式开发msm阶段"><a href="#正式开发msm阶段" class="headerlink" title="正式开发msm阶段"></a>正式开发msm阶段</h1><h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><ol><li>在 src\views 目录下新建 login 目录及此目录下新建文件 index.vue<br>说明：通过 import Login from ‘./views/login’ 导入组件，当前只指定了组件路径，默认导入的就是指定路径<br>下的 index.vue 组件</li><li>在 src\router.js 中配置路由（把原有的路由配置删除），如下：、 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="comment">// 默认导入目录下的 index.vue 文件，等价于 ./views/login/index.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'./views/login'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 登录页</span></span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'login'</span>, <span class="comment">//路由名称</span></span><br><span class="line">    component: Login</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>路由渲染出口，在 App.vue 中, 注意样式保持一致 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由组件渲染出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> &gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 上面不要加 scoped */</span></span></span><br><span class="line">body &#123;</span><br><span class="line">font-family: "微软雅黑";</span><br><span class="line"><span class="css"><span class="comment">/* 满屏显示, 不显示默认边距 margin:8px, */</span></span></span><br><span class="line">margin: 0px auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3></li></ol><ul><li><p>利用elementui模板创建表单（样式+校验）</p></li><li><p>EasyMock 添加登陆认证模拟接口</p><ul><li>因为要访问EasyMock 模拟接口, 所以要把 接口地址改一下，在 .env.development 文件中修改如下：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 VUE_APP_ 开头的变量会被 webpack 自动加载</span></span><br><span class="line"><span class="comment"># 定义请求的基础URL, 方便跨域请求时使用</span></span><br><span class="line"><span class="string">VUE_APP_BASE_API</span> <span class="string">=</span> <span class="string">'/dev-api'</span></span><br><span class="line"><span class="comment"># 接口服务地址</span></span><br><span class="line"><span class="comment"># VUE_APP_SERVICE_URL = 'http://localhost:8001'</span></span><br><span class="line"><span class="comment"># Easy-Mock 接口服务地址</span></span><br><span class="line"><span class="string">VUE_APP_SERVICE_URL</span> <span class="string">=</span> <span class="string">'https://www.easy-mock.com/mock/5d3d62c0250e9354d3640960'</span></span><br></pre></td></tr></table></figure></li><li>配置 Mock.js</li></ul></li><li><p>在 src/api 下创建 login.js , 添加内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'@/utils/request'</span></span><br><span class="line"><span class="comment">// 注意：导出的是普通成员函数</span></span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/user/login'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            username,</span><br><span class="line">            password</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/user/info/<span class="subst">$&#123;token&#125;</span>`</span>, <span class="comment">// 注意是反单引号 ``</span></span><br><span class="line">        method: <span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-container"</span>&gt;</span><br><span class="line">    &lt;!-- :rules=<span class="string">"rules"</span> 表单验证, ref 相当于 id，:model 表单数据对象, label-width 表单域标签的的宽度 --&gt;</span><br><span class="line">    &lt;el-form :rules=<span class="string">"rules"</span> ref=<span class="string">"form"</span> :model=<span class="string">"form"</span> label-width=<span class="string">"80px"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-form"</span>&gt;</span><br><span class="line">      &lt;h2 <span class="class"><span class="keyword">class</span></span>=<span class="string">"login-title"</span>&gt;会员管理系统&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- 注意： prop 是加在 el-form-item 组件上 --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="帐号" prop="username"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input v-model="form.username" placeholder="请输入帐号"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item label="密码" prop="password"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-input type="password" v-model="form.password" placeholder="请输入密码"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button type="primary" @click="submitForm('form')"&gt;登录&lt;/</span>el-button&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-form&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; login, getUserInfo &#125; <span class="keyword">from</span> <span class="string">"@/api/login"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 注意：按钮上调用的函数名要一致 submitForm</span></span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="comment">// 验证帐号和密码是否通过，</span></span><br><span class="line">          login(<span class="keyword">this</span>.form.username, <span class="keyword">this</span>.form.password).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> resp = response.data;</span><br><span class="line">            <span class="built_in">console</span>.log(</span><br><span class="line">             resp,resp.flag</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">              <span class="comment">// 通过，获取用户信息 异步请求</span></span><br><span class="line">              getUserInfo(resp.data.token).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 存入session中</span></span><br><span class="line">                <span class="keyword">const</span> respUser = response.data;</span><br><span class="line">                <span class="keyword">if</span> (respUser.flag) &#123;</span><br><span class="line">                  <span class="comment">// 将信息保存到浏览器的 localStorage 中</span></span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">'userinfo'</span>,respUser.data)</span><br><span class="line">                  localStorage.setItem(</span><br><span class="line">                    <span class="string">"msm-user"</span>,</span><br><span class="line">                    <span class="built_in">JSON</span>.stringify(respUser.data)</span><br><span class="line">                  );</span><br><span class="line">                  <span class="comment">// 方便后面重新验证</span></span><br><span class="line">                  localStorage.setItem(<span class="string">"msm-token"</span>, resp.data.token);</span><br><span class="line">                  <span class="comment">// 前往首页</span></span><br><span class="line">                  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                    message: <span class="string">'恭喜你，这是一条成功消息'</span>,</span><br><span class="line">                    type: <span class="string">'success'</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                  <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// 获取信息失败, 弹出警告</span></span><br><span class="line">                  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                    message: respUser.message,</span><br><span class="line">                    type: <span class="string">"warning"</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 未通过,弹出警告</span></span><br><span class="line">              <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                message: resp.message,</span><br><span class="line">                type: <span class="string">"warning"</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"error submit!!"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: &#123;&#125;,</span><br><span class="line">      <span class="comment">// 表单校验</span></span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          <span class="comment">// 对应el-form-item 的 prop 值</span></span><br><span class="line">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"帐号不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">"密码不能为空"</span>, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login-form &#123;</span><br><span class="line">  width: <span class="number">350</span>px;</span><br><span class="line">  <span class="comment">/* 上下间隙150px, 左右自动 */</span></span><br><span class="line">  margin: <span class="number">160</span>px auto;</span><br><span class="line">  <span class="comment">/*透明背景色*/</span></span><br><span class="line">  background-color: rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>);</span><br><span class="line">  padding: <span class="number">30</span>px;</span><br><span class="line">  <span class="comment">/* 圆角 */</span></span><br><span class="line">  border-radius: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.login-container &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">100</span>%;</span><br><span class="line">  background: url(<span class="string">"../../assets/login.jpg"</span>);</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 标题 */</span></span><br><span class="line">.login-title &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #303133;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="项目布局"><a href="#项目布局" class="headerlink" title="项目布局"></a>项目布局</h2><h3 id="配置路由-1"><a href="#配置路由-1" class="headerlink" title="配置路由"></a>配置路由</h3><ul><li>在 src\components 目录下新建布局组件文件 Loyout.vue , 基础布局我们都放到 components 下面 </li><li>在 src\router.js 中增加路由配置<ul><li>导入路由组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布局组件</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'./components/Layout.vue'</span></span><br></pre></td></tr></table></figure></li><li>增加路由信息<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="comment">// 基础布局</span></span><br><span class="line"> path: <span class="string">'/'</span>,</span><br><span class="line"> name: <span class="string">'layout'</span>,</span><br><span class="line"> component: Layout</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="布局实现"><a href="#布局实现" class="headerlink" title="布局实现"></a>布局实现</h3></li></ul></li><li>在 src\components 目录下新建3个子目录存放子组件： AppHeader 、 AppNavbar 、 AppMain</li><li>在新建的3个子目录下分别新建 index.vue 文件</li><li>将 Layout.vue 文件中三大组成部分，分别把对应模板剪切到对应 index.vue 中。<ul><li>src\components\AppHeader\index.vue <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;头部&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>在 Layout.vue 中使用 components 选项将3个组件作为子组件引入。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 头部区域 --&gt;</span><br><span class="line">    &lt;app-header /&gt;</span><br><span class="line">    &lt;!-- 左侧导航区域 --&gt;</span><br><span class="line">    &lt;app-navbar /&gt;</span><br><span class="line">    &lt;!-- 右侧主区域 --&gt;</span><br><span class="line">    &lt;app-main /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 1. 导入子组件</span></span><br><span class="line"><span class="keyword">import</span> AppHeader <span class="keyword">from</span> <span class="string">"./AppHeader"</span>;</span><br><span class="line"><span class="keyword">import</span> AppNavbar <span class="keyword">from</span> <span class="string">"./AppNavbar"</span>;</span><br><span class="line"><span class="keyword">import</span> AppMain <span class="keyword">from</span> <span class="string">"./AppMain"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 2. 注册为子组件</span></span><br><span class="line">components: &#123;</span><br><span class="line">    AppHeader, AppNavbar, AppMain</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="头部区域实现"><a href="#头部区域实现" class="headerlink" title="头部区域实现"></a>头部区域实现</h3>右侧下拉菜单直接引用elementui的代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;</span><br><span class="line">    &lt;!-- 头部左侧Logo和标题 --&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#/"</span>&gt;</span><br><span class="line">      &lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"logo"</span> src=<span class="string">"@/assets/logo.png"</span> width=<span class="string">"25px"</span> /&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"company"</span>&gt;Vue-会员管理系统&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>a&gt;</span><br><span class="line">    &lt;!-- 头部右侧下拉菜单 --&gt;</span><br><span class="line">    &lt;el-dropdown @command=<span class="string">"handleCommand"</span> &gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dropdown-link"</span> &gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-user"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        admin</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-arrow-down el-icon--right"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-dropdown-menu slot="dropdown"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-dropdown-item command="a" icon="el-icon-edit-outline"&gt;修改密码&lt;/</span>el-dropdown-item&gt;</span><br><span class="line">        &lt;el-dropdown-item command=<span class="string">"b"</span> icon=<span class="string">"el-icon-switch-button"</span>&gt;退出系统&lt;<span class="regexp">/el-dropdown-item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>el-dropdown-menu&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-dropdown&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    handleCommand(command) &#123;</span></span><br><span class="line"><span class="regexp">      this.$message("click on item " + command);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.logo &#123;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  <span class="comment">/* 上 右 下 左 */</span></span><br><span class="line">  padding: <span class="number">0</span> <span class="number">10</span>px <span class="number">0</span> <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.company &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下拉菜单 */</span></span><br><span class="line">.el-dropdown &#123;</span><br><span class="line">  float: right;</span><br><span class="line">  margin-right: <span class="number">40</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.el-dropdown-link &#123;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="左侧导航实现"><a href="#左侧导航实现" class="headerlink" title="左侧导航实现"></a>左侧导航实现</h3><p>直接引用elementui的代码</p><ul><li>在 src\views 目录下创建 home、member、supplier、goods、staff 目录，并且每个目录下创建一个<br>index.vue</li><li>配置所有菜单路由信息，在 router.js 中配置如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="comment">// 默认导入目录下的 index.vue 文件，等价于 ./views/login/index.vue</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'./views/login'</span></span><br><span class="line"><span class="comment">// 布局组件</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">'./components/Layout.vue'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/home'</span></span><br><span class="line"><span class="keyword">import</span> Member <span class="keyword">from</span> <span class="string">'./views/member'</span></span><br><span class="line"><span class="keyword">import</span> Supplier <span class="keyword">from</span> <span class="string">'./views/supplier'</span></span><br><span class="line"><span class="keyword">import</span> Goods <span class="keyword">from</span> <span class="string">'./views/goods'</span></span><br><span class="line"><span class="keyword">import</span> Staff <span class="keyword">from</span> <span class="string">'./views/staff'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 登录页</span></span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>, <span class="comment">//路由名称</span></span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 基础布局</span></span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'layout'</span>,</span><br><span class="line">      component: Layout,</span><br><span class="line">      redirect: <span class="string">'/home'</span>,<span class="comment">// 重定向到子路由</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/home'</span>,</span><br><span class="line">          component: Home,</span><br><span class="line">          meta: &#123; <span class="attr">title</span>: <span class="string">'首页'</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 会员管理</span></span><br><span class="line">      path: <span class="string">'/member'</span>,</span><br><span class="line">      component: Layout,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: Member,</span><br><span class="line">          meta: &#123; <span class="attr">title</span>: <span class="string">'会员管理'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 供应商管理</span></span><br><span class="line">      path: <span class="string">'/supplier'</span>,</span><br><span class="line">      component: Layout,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: Supplier,</span><br><span class="line">          meta: &#123; <span class="attr">title</span>: <span class="string">'供应商管理'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 商品管理</span></span><br><span class="line">      path: <span class="string">'/goods'</span>,</span><br><span class="line">      component: Layout,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: Goods,</span><br><span class="line">          meta: &#123; <span class="attr">title</span>: <span class="string">'商品管理'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 员工管理</span></span><br><span class="line">      path: <span class="string">'/staff'</span>,</span><br><span class="line">      component: Layout,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: Staff,</span><br><span class="line">          meta: &#123; <span class="attr">title</span>: <span class="string">'员工管理'</span> &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="右侧主区域实现"><a href="#右侧主区域实现" class="headerlink" title="右侧主区域实现"></a>右侧主区域实现</h3><ul><li>上方显示现在页面所在位置（例如：现在在员工管理页面）—-面包屑<ul><li>将 横向指示导航 抽取为子组件 AppMain\Link.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-breadcrumb separator=<span class="string">"/"</span>&gt;</span><br><span class="line">    &lt;el-breadcrumb-item <span class="class"><span class="keyword">class</span></span>=<span class="string">"line"</span> :to=<span class="string">"&#123; path: $route.path &#125;"</span>&gt;&#123;&#123;$route.meta.title&#125;&#125;&lt;<span class="regexp">/el-breadcrumb-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-breadcrumb&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">.el-breadcrumb &#123;</span></span><br><span class="line"><span class="regexp">  height: 10px;</span></span><br><span class="line"><span class="regexp">  padding: 20px;</span></span><br><span class="line"><span class="regexp">  border-radius: 4px;</span></span><br><span class="line"><span class="regexp">  /</span>* 投影 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.line &#123;</span></span><br><span class="line"><span class="regexp">  border-left: 3px solid #31c17b;</span></span><br><span class="line"><span class="regexp">  padding-left: 10px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></li><li>在 AppMain\index.vue 中导入 Link.vue<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">    &lt;!-- v-show 当路由为 /home 不显示 --&gt;</span><br><span class="line">    &lt;app-link v-show=<span class="string">"$route.path !== '/home'"</span> /&gt;</span><br><span class="line">    &lt;!-- 子路由渲染出口 --&gt;</span><br><span class="line">/j    &lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> AppLink <span class="keyword">from</span> <span class="string">"./Link.vue"</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123; AppLink &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h2></li></ul></li><li>EasyMock 添加退出模拟接口</li><li>定义退出方法 logout <ul><li>在 src\api\login.js 添加退出方法 logout<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> request(&#123;</span><br><span class="line">url: <span class="string">'/user/logout'</span>,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">token</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>组件中实现退出功能<ul><li>在 src\components\AppHeader\index.vue 实现退出功能<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; logout &#125; <span class="keyword">from</span> <span class="string">"@/api/login"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123; </span><br><span class="line">    handleCommand(command) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">          <span class="comment">//修改密码</span></span><br><span class="line">          <span class="keyword">this</span>.$message(<span class="string">"修改密码"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">          <span class="comment">//退出系统</span></span><br><span class="line">          logout(localStorage.getItem(localStorage.getItem(<span class="string">"msm-token"</span>))).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> resp = response.data;</span><br><span class="line">              <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">                <span class="comment">//推出成功</span></span><br><span class="line">                <span class="comment">// 清除本地数据</span></span><br><span class="line">                localStorage.removeItem(<span class="string">"msm-token"</span>);</span><br><span class="line">                localStorage.removeItem(<span class="string">"msm-user"</span>);</span><br><span class="line">                <span class="comment">//回到登录页面</span></span><br><span class="line">                <span class="keyword">this</span>.$router.push(<span class="string">"/login"</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                  message:resp.message,</span><br><span class="line">                  type: <span class="string">'warning'</span>,</span><br><span class="line">                  duration: <span class="number">500</span> <span class="comment">//弹出停留时间</span></span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h2><ol><li>新建 src\permission.js 权限校验文件，代码如下:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">权限校验：</span></span><br><span class="line"><span class="comment">通过router路由前置钩子函数 beforeEach() ，</span></span><br><span class="line"><span class="comment">在跳转路由前进行拦截判断是否已经登录，</span></span><br><span class="line"><span class="comment">如果已登录，则进行路由跳转，如果没有则回到登录页</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUserInfo &#125; <span class="keyword">from</span> <span class="string">'./api/login'</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">前置路由钩子函数</span></span><br><span class="line"><span class="comment">to ：即将要进入的目标路由对象</span></span><br><span class="line"><span class="comment">from ：当前导航正要离开的路由对象</span></span><br><span class="line"><span class="comment">next : 调用该方法，进入目标路由</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.获取 token</span></span><br><span class="line">    <span class="keyword">const</span> token = localStorage.getItem(<span class="string">'msm-token'</span>)</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        <span class="comment">//1.1如果没有获取到</span></span><br><span class="line">        <span class="comment">//要访问非登录页面，则不让访问，加到登录页面/login</span></span><br><span class="line">        <span class="keyword">if</span> (to.path !== <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 1.2 获取到token</span></span><br><span class="line">        <span class="comment">//     1.2.1请求路由 /login，那就去目标路由</span></span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//     1.2.2请求路由非登录页面，就通过token去获取用户信息</span></span><br><span class="line">            <span class="keyword">const</span> userinfo = localStorage.getItem(<span class="string">'msm-user'</span>)</span><br><span class="line">            <span class="keyword">if</span> (userinfo) &#123;</span><br><span class="line">                <span class="comment">//本地获取到，则直接去目标路由</span></span><br><span class="line">                next()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//     如果本地没有用户信息，就通过token去获取用户信息</span></span><br><span class="line">                getUserInfo(token).then(<span class="function"><span class="params">Response</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> resp = response.data</span><br><span class="line">                    <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">                        <span class="comment">// 获取到, 保存数据,则进行非登陆页面，否则回到登陆页面</span></span><br><span class="line">                        <span class="comment">//保存本地</span></span><br><span class="line">                        localStorage.setItem(<span class="string">'mgx-msm-user'</span>, <span class="built_in">JSON</span>.stringify(resp.data))</span><br><span class="line">                        next()</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 未获取到,重新登录</span></span><br><span class="line">                        next(&#123; <span class="attr">path</span>: <span class="string">'/login'</span> &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>将权限添加 到main.js中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限拦截</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./permission'</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="会员模块"><a href="#会员模块" class="headerlink" title="会员模块"></a>会员模块</h2><h3 id="会员数据列表"><a href="#会员数据列表" class="headerlink" title="会员数据列表"></a>会员数据列表</h3><ul><li><p>EasyMock 添加数据列表模拟接口</p><blockquote><p>请求URL： /member/list<br>请求方式： get<br>描述：会员数据列表<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line"><span class="string">"data|20"</span>: [&#123;</span><br><span class="line"><span class="string">"id|+1"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="string">"cardNum"</span>: <span class="string">"@integer(10000)"</span>, <span class="comment">//大于1000的正整数</span></span><br><span class="line"><span class="string">"name"</span>: <span class="string">"@cname"</span>,</span><br><span class="line"><span class="string">"birthday"</span>: <span class="string">"@date"</span>,</span><br><span class="line"><span class="string">"phone|11"</span>: <span class="string">"@integer(0,9)"</span>, <span class="comment">// 11个数字0-9间的数字</span></span><br><span class="line"><span class="string">"integral"</span>: <span class="string">"@integer(0, 500)"</span>,</span><br><span class="line"><span class="string">"money"</span>: <span class="string">"@float(0, 1000, 1, 3)"</span>, <span class="comment">// 0-1000小数,1-3位小数位</span></span><br><span class="line"><span class="string">"payType|1"</span>: [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>], <span class="comment">// 4选 其1</span></span><br><span class="line"><span class="string">"address"</span>: <span class="string">"@county(true)"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Api调用接口</p><ol><li>在 src/api 下创建 member.js , 调用接口代码如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 获取会员列表</span></span><br><span class="line">    getList() &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            url: <span class="string">'/member/list'</span>,</span><br><span class="line">            method: <span class="string">'get'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\member\index.vue 中, 添加 JS 代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> memberApi <span class="keyword">from</span> <span class="string">"@/api/member"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 钩子函数获取数据</span></span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.fetchData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetchData() &#123;</span><br><span class="line">      memberApi.getList().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.list = response.data.data;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>过滤器实现数据转换(1 2 3转换为微信，支付宝等)<br>渲染后发现支付类型是编号，应该将类型编号 转为名称。通过 filters 选项来定义过滤器来实现转换。<ul><li>member/index.js添加代码,JS 脚本处声明一个全局支付类型数组， 组件对象的 filters 选项指定转换规则<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> memberApi <span class="keyword">from</span> <span class="string">"@/api/member"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 支付类型</span></span><br><span class="line">      <span class="keyword">const</span> payTypeOptions = [</span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">"1"</span>, <span class="attr">name</span>: <span class="string">"现金"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">type</span>: <span class="string">"2"</span>, <span class="attr">name</span>: <span class="string">"微信"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">type</span>: <span class="string">"3"</span>, <span class="attr">name</span>: <span class="string">"支付宝"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">type</span>: <span class="string">"4"</span>, <span class="attr">name</span>: <span class="string">"银行卡"</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          list: []</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 钩子函数获取数据</span></span><br><span class="line">      created() &#123;</span><br><span class="line">        <span class="keyword">this</span>.fetchData();</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        fetchData() &#123;</span><br><span class="line">          memberApi.getList().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.list = response.data.data;</span><br><span class="line">            <span class="built_in">console</span>.log(response.data);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      filters: &#123;</span><br><span class="line">        <span class="comment">// filters 中 this 指向的不是vue实例, 所有无法直接获取 data 中的数据</span></span><br><span class="line">        payTypeFilter(type) &#123;</span><br><span class="line">          <span class="comment">// 全局的 payTypeOptions , 返回一个满足条件的对象</span></span><br><span class="line">          <span class="keyword">const</span> obj = payTypeOptions.find(<span class="function"><span class="params">obj</span> =&gt;</span> obj.type === type);</span><br><span class="line">          <span class="comment">// 非空返回类型名称</span></span><br><span class="line">          <span class="keyword">return</span> obj ? obj.name : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    ~~~  </span></span><br><span class="line"><span class="regexp">+  修改 模板代码</span></span><br><span class="line"><span class="regexp">~~~js</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;el-table-column prop="payType" label="支付类型" &gt;</span></span><br><span class="line"><span class="regexp">    &lt;template slot-scope="scope"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123; scope.row.payType | payTypeFilter &#125;&#125; &lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-table-column&gt;</span><br></pre></td></tr></table></figure><h3 id="列表下方分页"><a href="#列表下方分页" class="headerlink" title="列表下方分页"></a>列表下方分页</h3></li></ul></li></ul></li><li><p>EasyMock 添加会员分页模拟接口</p><blockquote><p>请求URL： /member/list/search/{page}/{size}<br>page 当前要查询的页码， size 每页显示条数，通过这两个值，可查询出当前请求要响应的数据。<br>请求方式： post<br>描述：会员列表数据分页<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"total"</span>: <span class="string">"@integer(100,200)"</span>, <span class="comment">// 查询出来的总记录数</span></span><br><span class="line">    <span class="string">"rows|10"</span>: [&#123; <span class="comment">// 返回当前页的记录数 10 条, 即每页显示 10 条记录</span></span><br><span class="line">      <span class="string">"id|+1"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"cardNum"</span>: <span class="string">"@integer(10000)"</span>, <span class="comment">//大于1000的正整数</span></span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"@cname"</span>,</span><br><span class="line">      <span class="string">"birthday"</span>: <span class="string">"@date"</span>,</span><br><span class="line">      <span class="string">"phone|11"</span>: <span class="string">"@integer(0,9)"</span>, <span class="comment">// 11个位数字</span></span><br><span class="line">      <span class="string">"integral"</span>: <span class="string">"@integer(0, 500)"</span>,</span><br><span class="line">      <span class="string">"money"</span>: <span class="string">"@float(0, 100, 1, 3)"</span>, <span class="comment">// 0-1000小数,1-3位小数位</span></span><br><span class="line">      <span class="string">"payType|1"</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],</span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"@county(true)"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Api调用接口</p><ol><li><p>修改 src\api 下的 member.js , 在导出的默认对象中，增加分页查询方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询,</span></span><br><span class="line"><span class="comment">// page当前页码, size 每页显示条数, searchMap 条件</span></span><br><span class="line"><span class="comment">// 后台要通过 page 和 size 统计本次请求响应的数据</span></span><br><span class="line">search(page, size, searchMap) &#123;</span><br><span class="line"><span class="keyword">return</span> request(&#123;</span><br><span class="line">url: <span class="string">`/member/list/search/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;size&#125;</span>`</span>,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">data: searchMap</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 src\views\member\index.vue 中, 添加 JS 代码如下：<br>声明分页属性， 调用 getList 改为调用 search 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list: [],</span><br><span class="line">    total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">    currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">    pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">    searchMap: &#123;&#125; <span class="comment">// 条件查询绑定条件值</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 钩子函数获取数据</span></span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.fetchData();</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="comment">// memberApi.getList().then(response =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   this.list = response.data.data;</span></span><br><span class="line">    <span class="comment">//   console.log(response.data);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用分页方法查询, 不要少了 this</span></span><br><span class="line">    memberApi</span><br><span class="line">      .search(<span class="keyword">this</span>.currentPage, <span class="keyword">this</span>.pageSize, <span class="keyword">this</span>.searchMap)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reqs = response.data;</span><br><span class="line">        <span class="keyword">this</span>.total = reqs.data.total;</span><br><span class="line">        <span class="keyword">this</span>.list = reqs.data.rows;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.total, <span class="keyword">this</span>.list);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>添加分页模板</p><ul><li><p>修改 src\views\member\index.vue ， template 标签中添加页面模板代码：  </p><p>注意：添加在 div 里面。因为 template 里面只能有唯一根节点<br>current-change 和 size-change 事件都是调用 fetchData </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分页，添加在div里面 --&gt;</span><br><span class="line">&lt;el-pagination</span><br><span class="line">@size-change=<span class="string">"fetchData"</span></span><br><span class="line">@current-change=<span class="string">"fetchData"</span></span><br><span class="line">:current-page=<span class="string">"currentPage"</span></span><br><span class="line">:page-sizes=<span class="string">"[10, 20, 50]"</span></span><br><span class="line">:page-size=<span class="string">"pageSize"</span></span><br><span class="line">layout=<span class="string">"total, sizes, prev, pager, next, jumper"</span></span><br><span class="line">:total=<span class="string">"total"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-pagination&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>解决动态页码和当前页</p><ul><li>将 @size-change 和 @current-change 事件处理的函数名改变为 handleSizeChange 和<br>handleCurrentChange<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">@size-change=<span class="string">"handleSizeChange"</span></span><br><span class="line">@current-change=<span class="string">"handleCurrentChange"</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中添加函数，<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  methods: &#123;</span><br><span class="line">handleSizeChange(val) &#123;</span><br><span class="line"><span class="keyword">this</span>.pageSize = val</span><br><span class="line"><span class="keyword">this</span>.fetchData()</span><br><span class="line">&#125;,</span><br><span class="line">handleCurrentChange(val) &#123;</span><br><span class="line"><span class="keyword">this</span>.currentPage = val</span><br><span class="line"><span class="keyword">this</span>.fetchData()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="条件查询实现"><a href="#条件查询实现" class="headerlink" title="条件查询实现"></a>条件查询实现</h3></li></ul></li></ol></li><li><p>修改 src\views\member\index.vue ，增加条件查询模板代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 条件查询。 inline 属性设置表单变为行内的表单域 --&gt;</span><br><span class="line">&lt;el-form ref=<span class="string">"searchForm"</span> :inline=<span class="string">"true"</span> :model=<span class="string">"searchMap"</span> style=<span class="string">"margin-top: 20px;"</span> &gt;</span><br><span class="line">&lt;!-- 有prop才可以重置 --&gt;</span><br><span class="line">&lt;el-form-item prop=<span class="string">"cardNum"</span>&gt;</span><br><span class="line">&lt;el-input v-model=<span class="string">"searchMap.cardNum"</span> placeholder=<span class="string">"会员卡号"</span> style=<span class="string">"width: 200px;"</span> &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-form-item prop="name"&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-input v-model="searchMap.name" placeholder="会员名称" style="width: 200px;" &gt;&lt;/</span>el-input&gt;</span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-form-item prop="payType"&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-select v-model="searchMap.payType" placeholder="支付类型" style="width: 110px" &gt;</span></span><br><span class="line"><span class="regexp">&lt;!--key 标识， label 下拉显示的文本，vulue 表单值 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-option</span></span><br><span class="line"><span class="regexp">v-for="option in payTypeOptions"</span></span><br><span class="line"><span class="regexp">:key="option.type"</span></span><br><span class="line"><span class="regexp">:label="option.name"</span></span><br><span class="line"><span class="regexp">:value="option.type"</span></span><br><span class="line"><span class="regexp">/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-form-item&gt;</span><br><span class="line">&lt;el-form-item prop=<span class="string">"birthday"</span>&gt;</span><br><span class="line">&lt;!-- value-format 是指定绑定值的格式 --&gt;</span><br><span class="line">&lt;el-date-picker value-format=<span class="string">"yyyy-MM-dd"</span> v-model=<span class="string">"searchMap.birthday"</span> type=<span class="string">"date"</span> placeholder=<span class="string">"出生日期"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;el-button type="primary" icon="el-icon-search" @click="fetchData"&gt;查询&lt;/</span>el-button&gt;</span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-form&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 data 选项声明 payTypeOptions 属性用于下拉框 ,并将全局的赋值给它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  list: [],</span><br><span class="line">  total: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">  currentPage: <span class="number">1</span>, <span class="comment">// 当前页, 默认第1页</span></span><br><span class="line">  pageSize: <span class="number">10</span>, <span class="comment">// 每页显示条数， 10条</span></span><br><span class="line">  searchMap: &#123; <span class="comment">// 条件查询绑定的条件值</span></span><br><span class="line">  cardNum: <span class="string">''</span>,</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  payType: <span class="string">''</span>,</span><br><span class="line">  birthday: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  payTypeOptions, <span class="comment">// 支付类型，ES6语法</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><h3 id="搜索框重置功能"><a href="#搜索框重置功能" class="headerlink" title="搜索框重置功能"></a>搜索框重置功能</h3></li><li><p>在 条件查询区域添加 一个 重置 按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button @click=<span class="string">"resetForm('searchForm')"</span>&gt;重置&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>methods 选项中添加重置处理方法 resetForm<br>  注意: 在 el-form-item 标签属性 prop 上, 指定了字段名, 重置才会生效</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单重置，</span></span><br><span class="line">    <span class="comment">// 在 el-form-item 标签属性 prop 上, 指定了字段名, 重置才会生效</span></span><br><span class="line">    resetForm(formName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs[formName].resetFields();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="新增会员对话框"><a href="#新增会员对话框" class="headerlink" title="新增会员对话框"></a>新增会员对话框</h3><ol><li><p>在 src\views\member\index.vue 中分页区域的下方，新增对话框形式表单数据模板</p><ul><li>el-dialog 标答属性 title 窗口标题，visible.sync 是否弹出窗口<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;el-dialog title=<span class="string">"会员编辑"</span> :visible.sync=<span class="string">"dialogFormVisible"</span> width=<span class="string">"500px"</span>&gt;</span><br><span class="line">&lt;!-- status-icon 当表单校验不通过时, 输入框右侧有个 x 小图标 --&gt;</span><br><span class="line">  &lt;el-form</span><br><span class="line">    status-icon</span><br><span class="line">    ref=<span class="string">"pojoForm"</span></span><br><span class="line">    :model=<span class="string">"pojo"</span></span><br><span class="line">    label-width=<span class="string">"100px"</span></span><br><span class="line">    label-position=<span class="string">"right"</span></span><br><span class="line">    style=<span class="string">"width: 400px;"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">"会员卡号"</span> prop=<span class="string">"cardNum"</span>&gt;</span><br><span class="line">      &lt;el-input v-model=<span class="string">"pojo.cardNum"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="会员姓名" prop="name"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-input v-model="pojo.name" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="会员生日" prop="birthday"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-date-picker v-model="pojo.birthday" type="date" placeholder="请点击选择" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="手机号码" prop="phone"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-input v-model="pojo.phone" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="开卡金额" prop="money"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-input v-model="pojo.money" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="可用积分"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-input v-model="pojo.integral"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-form-item label="支付类型" prop="payType"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-select v-model="pojo.payType" class="filter-item" placeholder="请点击选择"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-option</span></span><br><span class="line"><span class="regexp">          v-for="option in payTypeOptions"</span></span><br><span class="line"><span class="regexp">          :key="option.type"</span></span><br><span class="line"><span class="regexp">          :label="option.name"</span></span><br><span class="line"><span class="regexp">          :value="option.type"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">"会员地址"</span>&gt;</span><br><span class="line">      &lt;el-input</span><br><span class="line">        v-model=<span class="string">"pojo.address"</span></span><br><span class="line">        type=<span class="string">"textarea"</span></span><br><span class="line">        :autosize=<span class="string">"&#123; minRows: 2, maxRows: 4&#125;"</span></span><br><span class="line">        placeholder=<span class="string">"请输入地址"</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-form&gt;</span><br><span class="line">  &lt;div slot=<span class="string">"footer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog-footer"</span>&gt;</span><br><span class="line">    &lt;el-button @click=<span class="string">"dialogFormVisible = false"</span>&gt;取 消&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-button type="primary" @click="addData('pojoForm')"&gt;确 定&lt;/</span>el-button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-dialog&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>data 选项中声明变量数据对象 pojo 和 dialogFormVisible 当它为 true 弹出，false 不弹。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pojo: &#123;</span><br><span class="line">cardNum: <span class="string">''</span>,</span><br><span class="line">name: <span class="string">''</span>,</span><br><span class="line">birthday: <span class="string">''</span>,</span><br><span class="line">phone: <span class="string">''</span>,</span><br><span class="line">money: <span class="number">0</span>,</span><br><span class="line">integral: <span class="number">0</span>,</span><br><span class="line">payType: <span class="string">''</span>,</span><br><span class="line">address: <span class="string">''</span></span><br><span class="line">&#125;, <span class="comment">// 提交的数据</span></span><br><span class="line">dialogFormVisible: <span class="literal">false</span>, <span class="comment">// 控制新增对话框</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 methods 中添加 addData() 函数,提交表单数据用的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 提交新增数据</span></span><br><span class="line">addData(formName) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="comment">// 验证通过，提交添加</span></span><br><span class="line">alert(<span class="string">'Add submit!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 验证不通过</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在 template 中的查询按钮旁边添加一个 新增 按钮，用于打开新增会员对话框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"primary"</span> icon=<span class="string">"el-icon-edit"</span></span><br><span class="line">@click=<span class="string">"handleAdd"</span>&gt;新增&lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 methods 中添加 handleAdd() 函数, 打开新增对话框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开新增窗口</span></span><br><span class="line">    handleAdd() &#123;</span><br><span class="line">      <span class="keyword">this</span>.dialogFormVisible = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this.$nextTick()它是一个异步事件，当渲染结束 之后 ，它的回调函数才会被执行</span></span><br><span class="line">        <span class="comment">// 弹出窗口打开之后 ，需要加载Dom, 就需要花费一点时间，我们就应该等待它加载完dom之后，再进行调</span></span><br><span class="line">        用resetFields方法，重置表单和清除样式</span><br><span class="line">        <span class="keyword">this</span>.$refs[<span class="string">'pojoForm'</span>].resetFields()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li><p>表单数据校验</p><ul><li>在新增窗口的 el-form 上绑定属性 :rules=”rules”</li><li>在 data 选项中添加 rules 属性进行校验，对卡号，姓名、支付类型 校验<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">。。。</span><br><span class="line"><span class="comment">// 校验规则</span></span><br><span class="line">rules: &#123;</span><br><span class="line">cardNum: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'卡号不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;],</span><br><span class="line">name: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'姓名不能为空'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;],</span><br><span class="line">payType: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请选择支付类型'</span>, <span class="attr">trigger</span>: <span class="string">'change'</span> &#125;],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表单数据提交</p><ul><li>EasyMock 添加新增会员模拟接口<blockquote><p>请求URL： /member<br>请求方式： post<br>描述：新增会员<br>mock.js 配置：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;code&quot;: 2000,</span><br><span class="line"> &quot;flag&quot;: true,</span><br><span class="line"> &#39;message&#39;: &quot;新增成功&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>Api 调用接口<ol><li>src\api\member.js 导出的默认对象中，添加调用新增接口的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增会员</span></span><br><span class="line">add(pojo) &#123;</span><br><span class="line"><span class="keyword">return</span> request(&#123;</span><br><span class="line">url: <span class="string">'/member'</span>,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">data: pojo</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\member\index.vue 中的 addData 方法中提交数据，代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 提交新增数据</span></span><br><span class="line">addData(formName) &#123;</span><br><span class="line"><span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="comment">// 验证通过，提交添加</span></span><br><span class="line">memberApi.add(<span class="keyword">this</span>.pojo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> resp = response.data</span><br><span class="line"><span class="built_in">console</span>.log(resp)</span><br><span class="line"><span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line"><span class="comment">// 新增成功, 刷新列表数据</span></span><br><span class="line"><span class="keyword">this</span>.fetchData()</span><br><span class="line"><span class="keyword">this</span>.dialogFormVisible=<span class="literal">false</span> <span class="comment">//关闭窗口</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 失败, 弹出提示</span></span><br><span class="line"><span class="keyword">this</span>.$message(&#123;</span><br><span class="line">  message: resp.message,</span><br><span class="line">  type: <span class="string">'warning'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 验证不通过</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="会员信息修改"><a href="#会员信息修改" class="headerlink" title="会员信息修改"></a>会员信息修改</h3></li></ol></li></ul></li></ol><ul><li><p>EasyMock 添加模拟接口</p><ol><li>ID 查询数据接口<blockquote><p>请求URL： /member/{id}<br>请求方式： get<br>描述：会员 ID 查询数据接口<br>mock.js 配置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"查询成功"</span>,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="string">"cardNum"</span>: <span class="string">"test01"</span>, <span class="comment">//大于1000的正整数</span></span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"测试会员"</span>,</span><br><span class="line">  <span class="string">"birthday"</span>: <span class="string">"@date"</span>,</span><br><span class="line">  <span class="string">"phone|11"</span>: <span class="string">"@integer(0,9)"</span>, <span class="comment">// 11个位数字</span></span><br><span class="line">  <span class="string">"integral"</span>: <span class="string">"@integer(0, 500)"</span>,</span><br><span class="line">  <span class="string">"money"</span>: <span class="string">"@float(0, 100, 1, 3)"</span>, <span class="comment">// 0-1000小数,1-3位小数位</span></span><br><span class="line">  <span class="string">"payType|1"</span>: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"@county(true)"</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>提交修改数据接口<blockquote><p>请求URL： /member/{id}<br>说明：id 是修改的那条数据<br>请求方式： put<br>描述：会员数据更新<br>mock.js 配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"code"</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="string">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">'message'</span>: <span class="string">"修改成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Api 调用接口</p><ol><li>src\api\member.js 导出的默认对象中，添加ID查询方法 getById 和 更新方法 update<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line">  getById(id) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`/member/<span class="subst">$&#123;id&#125;</span>`</span>, <span class="comment">// 反单引号 `</span></span><br><span class="line">    method: <span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  update(pojo) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">      url: <span class="string">`/member/<span class="subst">$&#123;pojo.id&#125;</span>`</span>, <span class="comment">// 反单引号 ``</span></span><br><span class="line">      method: <span class="string">'put'</span>, <span class="comment">// put 方式提交</span></span><br><span class="line">      data: pojo</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\member\index.vue 中的 handleEdit 方法做如下修改：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开编辑窗口</span></span><br><span class="line">  handleEdit(id) &#123;</span><br><span class="line">    <span class="comment">// 清空原数据</span></span><br><span class="line">    <span class="keyword">this</span>.handleAdd()</span><br><span class="line">    <span class="comment">// 通过Id查询数据</span></span><br><span class="line">    memberApi.getById(id).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resp = response.data</span><br><span class="line">      <span class="keyword">if</span>(resp.flag) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pojo = resp.data</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li>在 data选项的 pojo 对象中添加 id 属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id: null, &#x2F;&#x2F;增加id</span><br></pre></td></tr></table></figure></li><li>修改对话框中的确认按钮点击事件， pojo.id === null 值为true是新增，有id说明是更新\<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"pojo.id === null ? addData('pojoForm'): updateData('pojoForm')"</span>&gt;确 定</span><br><span class="line"> &lt;<span class="regexp">/el-button&gt;</span></span><br></pre></td></tr></table></figure></li><li>提交更新数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> updateData(formName) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">// 验证通过，提交</span></span><br><span class="line">      memberApi.update(<span class="keyword">this</span>.pojo).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> resp = response.data;</span><br><span class="line">        <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">          <span class="keyword">this</span>.fetchData(); <span class="comment">// 刷新列表数据</span></span><br><span class="line">          <span class="keyword">this</span>.dialogFormVisible = <span class="literal">false</span>; <span class="comment">// 关闭窗口</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 失败, 弹出提示</span></span><br><span class="line">          <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">            message: resp.message,</span><br><span class="line">            type: <span class="string">"warning"</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 验证不通过</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="会员信息删除"><a href="#会员信息删除" class="headerlink" title="会员信息删除"></a>会员信息删除</h3></li></ol></li><li><p>EasyMock 添加模拟接口</p><blockquote><p>请求URL： /member/{id}<br>请求方式： delete<br>描述：根据会员ID删除<br>mock.js 配置：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;code&quot;: 2000,</span><br><span class="line">&quot;flag&quot;: true,</span><br><span class="line">&quot;message&quot;: &quot;删除成功&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>api调用接口</p><ol><li>src\api\member.js 导出的默认对象中，添加 deleteById 方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deleteById(id) &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">`/member/<span class="subst">$&#123;id&#125;</span>`</span>, <span class="comment">// 反单引号 ``</span></span><br><span class="line">    method: <span class="string">'delete'</span>, <span class="comment">// delete 方式提交</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 src\views\member\index.vue 中的 handleDele 方法做如下修改：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line">    handleDele(id) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"删除"</span>, id);</span><br><span class="line">      <span class="keyword">this</span>.$confirm(<span class="string">"确认删除这条记录吗？"</span>, <span class="string">"提示"</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">"确定"</span>,</span><br><span class="line">        cancelButtonText: <span class="string">"取消"</span>,</span><br><span class="line">        type: <span class="string">"warning"</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 确认</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'确认'</span>)</span><br><span class="line">          memberApi.deleteById(id).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> resp = response.data;</span><br><span class="line">            <span class="comment">//提示信息</span></span><br><span class="line">            <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">              message: resp.message,</span><br><span class="line">              type: resp.flag ? <span class="string">'success'</span>: <span class="string">'error'</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> (resp.flag) &#123;</span><br><span class="line">              <span class="comment">// 删除成功，刷新列表</span></span><br><span class="line">              <span class="keyword">this</span>.fetchData();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 取消删除，不理会</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'取消'</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正式开发msm阶段&quot;&gt;&lt;a href=&quot;#正式开发msm阶段&quot; class=&quot;headerlink&quot; title=&quot;正式开发msm阶段&quot;&gt;&lt;/a&gt;正式开发msm阶段&lt;/h1&gt;&lt;h2 id=&quot;登录页面&quot;&gt;&lt;a href=&quot;#登录页面&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>msm会员系统项目搭建阶段</title>
    <link href="http://yoursite.com/2020/01/31/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E9%98%B6%E6%AE%B5/"/>
    <id>http://yoursite.com/2020/01/31/msm/msm%E4%BC%9A%E5%91%98%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E9%98%B6%E6%AE%B5/</id>
    <published>2020-01-30T16:55:00.000Z</published>
    <updated>2020-02-06T12:45:47.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目搭建阶段"><a href="#项目搭建阶段" class="headerlink" title="项目搭建阶段"></a>项目搭建阶段</h1><h2 id="利用vue-cli脚手架工具初始化项目"><a href="#利用vue-cli脚手架工具初始化项目" class="headerlink" title="利用vue-cli脚手架工具初始化项目"></a>利用vue-cli脚手架工具初始化项目</h2><ul><li>创建项目（cmd）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create mxg-msg <span class="comment">//项目名</span></span><br></pre></td></tr></table></figure></li><li>启动项目测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ol><li><p>配置 vue.config.js</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8888</span><span class="string">,</span> <span class="string">//</span> <span class="string">端口号，如果端口号被占用，会自动提升1</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">"localhost"</span><span class="string">,</span> <span class="string">//主机名，</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">，</span>  <span class="string">真机</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">https:</span> <span class="literal">false</span><span class="string">,</span> <span class="string">//协议</span></span><br><span class="line">        <span class="attr">open:</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//启动服务时自动打开浏览器访问</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">lintOnSave:</span> <span class="literal">false</span><span class="string">,</span> <span class="string">//</span> <span class="string">关闭格式检查</span></span><br><span class="line">    <span class="attr">productionSourceMap:</span> <span class="literal">false</span><span class="string">,</span> <span class="string">//</span> <span class="string">打包时不会生成</span> <span class="string">.map</span> <span class="string">文件，加快打包速度</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>整合第三方库</p><ul><li>安装 axios , 处理异步请求<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -S axios</span><br><span class="line">~~~   </span><br><span class="line">+ 安装 pubsub-js ，实现非父子组件间通信</span><br></pre></td></tr></table></figure>npm i -S pubsub-js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 安装elementui</span><br></pre></td></tr></table></figure>npm i -S element-ui<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 在 mxg-ssm\src\main.js 中导入 element-ui 和 element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css ，</span><br><span class="line">使用 Vue.use(ElementUI)</span><br><span class="line">~~~java</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">&#x2F;&#x2F;注意引入在vue的下面</span><br><span class="line">import ElementUI from &#39;element-ui&#39;; &#x2F;&#x2F; 组件库</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;; &#x2F;&#x2F; 样式</span><br><span class="line">import App from &quot;.&#x2F;App.vue&quot;;</span><br><span class="line">import router from &quot;.&#x2F;router&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 ElementUI</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 消息提示的环境配置，是否为生产环境：</span><br><span class="line">&#x2F;&#x2F; false 开发环境：Vue会提供很多警告来方便调试代码。</span><br><span class="line">&#x2F;&#x2F; true 生产环境：警告却没有用，反而会增加应用的体积</span><br><span class="line">Vue.config.productionTip &#x3D; process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">router,</span><br><span class="line">render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure>npm run serve跑成功说明整合elementui成功</li></ul></li></ol><hr><h2 id="Axios-封装和跨域问题"><a href="#Axios-封装和跨域问题" class="headerlink" title="Axios 封装和跨域问题"></a>Axios 封装和跨域问题</h2><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><ol><li>封装axios对象<br> 因为项目中很多组件中要通过 Axios 发送异步请求，所以封装一个 Axios 对象。自已封装的 Axios 在后续可以使用<br> axios 中提供的拦截器。<ul><li>src 目录下创建 utils 目录及 utils 下面创建 request.js 文件  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动创建一个 axios 对象, 参考: https://github.com/axios/axios#creating-an-instance</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 请求配置参考: https://github.com/axios/axios#request-config</span></span><br><span class="line">    <span class="comment">// 根据不同环境设置 baseURL, 最终发送请求时的URL为: baseURL + 发送请求时写URL ,</span></span><br><span class="line">    <span class="comment">// 比如 get('/test'), 最终发送请求是: /dev-api/test</span></span><br><span class="line">    <span class="comment">// baseURL: '/dev-api',</span></span><br><span class="line">    baseURL: <span class="string">'/'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// 请求超时</span></span><br><span class="line">&#125;)</span><br><span class="line">request.get(<span class="string">'/db.json'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request<span class="comment">//导出axios对象</span></span><br></pre></td></tr></table></figure></li></ul></li><li>测试封装的axios<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><blockquote><p>前后端分离时，前端和后端API服务器可能不在同一台主机上，就存在跨域问&gt;题，浏览器限制了跨域访问。<br>同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域。<br>跨域解决:<br>通过代理请求的方式解决，将 API 请求通过代理服务器请求到 API 服务器。<br>开发环境中，在 vue.config.js 文件中使用 devServer.proxy 选项进行代理&gt;配置。<br>参考：<a href="https://cli.vuejs.org/zh/config/#devserver" target="_blank" rel="noopener">https://cli.vuejs.org/zh/config/#devserver</a></p></blockquote></li><li>在 vue.config.js 文件中使用 devServer.proxy 选项进行代理配置,添加以下代码 <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">//</span> <span class="string">匹配</span> <span class="string">/dev-api</span> <span class="string">开头的请求，</span></span><br><span class="line">            <span class="string">'/dev-api'</span><span class="string">:</span> <span class="string">&#123;</span></span><br><span class="line">                <span class="string">//</span> <span class="string">目标服务器,</span> <span class="string">代理访问到</span> <span class="string">https://localhost:8001</span></span><br><span class="line">                <span class="attr">target:</span> <span class="string">'http://localhost:8001'</span><span class="string">,</span></span><br><span class="line">                <span class="string">//</span> <span class="string">开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，</span></span><br><span class="line">                <span class="string">//</span> <span class="string">并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span></span><br><span class="line">                <span class="attr">changOrigin:</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//开启代理</span></span><br><span class="line">                <span class="attr">pathRewrite:</span> <span class="string">&#123;</span></span><br><span class="line">                    <span class="string">//</span> <span class="string">会将</span> <span class="string">/dev-api</span> <span class="string">替换为</span> <span class="string">''</span><span class="string">,也就是</span> <span class="string">/dev-api</span> <span class="string">会移除，</span></span><br><span class="line">                    <span class="string">//</span> <span class="string">如</span> <span class="string">/dev-api/db.json</span> <span class="string">代理到</span> <span class="string">https://localhost:8080/db.json</span></span><br><span class="line">                    <span class="string">'^/dev-api'</span><span class="string">:</span> <span class="string">''</span><span class="string">,</span></span><br><span class="line">                <span class="string">&#125;</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li>test.js 中的 BASE_URL 修改如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const BASE_URL &#x3D; &#39;&#x2F;dev-api&#39;</span><br></pre></td></tr></table></figure> (完整代码) <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ 代表的是 /src</span></span><br><span class="line"><span class="comment">// import axios from '@/utils/request'</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">"@/utils/request"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">'/dev-api'</span></span><br><span class="line"><span class="comment">// 测试1</span></span><br><span class="line">request.get(BASE_URL + <span class="string">"/db.json"</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"get1"</span>, response.data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试2, 使用对象形式传入请求配置，如 请求url, method，param</span></span><br><span class="line">request(&#123;</span><br><span class="line">    url: BASE_URL + <span class="string">"/db.json"</span>,</span><br><span class="line">    method: <span class="string">"get"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"get2"</span>, response.data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试3 导出默认对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getList() &#123;</span><br><span class="line">        <span class="keyword">const</span> req = request(&#123;</span><br><span class="line">            url: BASE_URL + <span class="string">"/db.json"</span>,</span><br><span class="line">            method: <span class="string">"get"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// console.log(req) // Promise</span></span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="配置不同环境常量值"><a href="#配置不同环境常量值" class="headerlink" title="配置不同环境常量值"></a>配置不同环境常量值</h2><p>开发环境请求 Mock.js 获取数据，开发环境请求后台接口获取数据，不同环境请求的URL不一样，所以要为不同环<br>境匹配不同请求接口URL，通过路径前缀进行匹配。当前只针对开发环境，后面会生产部署再讲生产如何实现。</p><ol><li>在 mxg-mms 根目录下创建 .env.development 和 .env.production 文件，<ul><li>.env.development<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 VUE_APP_ 开头的变量会被 webpack 自动加载</span></span><br><span class="line"><span class="comment"># 定义请求的基础URL, 方便跨域请求时使用</span></span><br><span class="line"><span class="string">VUE_APP_BASE_API</span> <span class="string">=</span> <span class="string">'/dev-api'</span></span><br><span class="line"><span class="comment"># 接口服务地址， 以你自已的为主</span></span><br><span class="line"><span class="string">VUE_APP_SERVICE_URL</span> <span class="string">=</span> <span class="string">'http://localhost:8001'</span></span><br></pre></td></tr></table></figure></li><li>.env.production <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 VUE_APP_ 开头的变量会被 webpack 自动加载</span></span><br><span class="line"><span class="comment"># 定义请求的基础URL, 方便跨域请求时使用</span></span><br><span class="line"><span class="string">VUE_APP_BASE_API</span> <span class="string">=</span> <span class="string">'/pro-api'</span></span><br></pre></td></tr></table></figure></li></ul></li><li>重构代理配置<ul><li>重构 vue.config.js 中的 devServer.proxy 代理配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">        <span class="comment">// 匹配 /dev-api 开头的请求，</span></span><br><span class="line">        <span class="comment">// '/dev-api': &#123;</span></span><br><span class="line">        [process.env.VUE_APP_BASE_API]: &#123; </span><br><span class="line">            <span class="comment">// 目标服务器, 代理访问到 https://localhost:8001</span></span><br><span class="line">            <span class="comment">// target: 'http://localhost:8001',</span></span><br><span class="line">            target: process.env.VUE_APP_SERVICE_URL, <span class="comment">// 在 .env.development 中配置的</span></span><br><span class="line">            <span class="comment">// 开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，</span></span><br><span class="line">            <span class="comment">// 并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span></span><br><span class="line">            changOrigin: <span class="literal">true</span>, <span class="comment">//开启代理</span></span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">                <span class="comment">// 会将 /dev-api 替换为 '',也就是 /dev-api 会移除，</span></span><br><span class="line">                <span class="comment">// 如 /dev-api/db.json 代理到 https://localhost:8080/db.json</span></span><br><span class="line">                <span class="comment">// '^/dev-api': '',</span></span><br><span class="line">                [<span class="string">'^'</span> + process.env.VUE_APP_BASE_API]: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>修改 utils/request.js 文件配置： baseURL: process.env.VUE_APP_BASE_API<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="comment">// 手动创建一个 axios 对象, 参考: https://github.com/axios/axios#creating-an-instance</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 请求配置参考: https://github.com/axios/axios#request-config</span></span><br><span class="line">    <span class="comment">// 根据不同环境设置 baseURL, 最终发送请求时的URL为: baseURL + 发送请求时写URL ,</span></span><br><span class="line">    <span class="comment">// 比如 get('/test'), 最终发送请求是: /dev-api/test</span></span><br><span class="line">    <span class="comment">// baseURL: '/dev-api',</span></span><br><span class="line">    <span class="comment">// baseURL: '/',</span></span><br><span class="line">    <span class="comment">// 根目录下的 .env.development 与 .env.production 中配置 VUE_APP_BASE_API</span></span><br><span class="line">    baseURL: process.env.VUE_APP_BASE_API, <span class="comment">// "/dev-api"</span></span><br><span class="line">    timeout: <span class="number">5000</span> <span class="comment">// 请求超时</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request <span class="comment">// 导出 axios 对象</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目搭建阶段&quot;&gt;&lt;a href=&quot;#项目搭建阶段&quot; class=&quot;headerlink&quot; title=&quot;项目搭建阶段&quot;&gt;&lt;/a&gt;项目搭建阶段&lt;/h1&gt;&lt;h2 id=&quot;利用vue-cli脚手架工具初始化项目&quot;&gt;&lt;a href=&quot;#利用vue-cli脚手架工具初始化项
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="axios" scheme="http://yoursite.com/tags/axios/"/>
    
      <category term="ElementUI" scheme="http://yoursite.com/tags/ElementUI/"/>
    
      <category term="Mock.js" scheme="http://yoursite.com/tags/Mock-js/"/>
    
  </entry>
  
  <entry>
    <title>restful风格架构编程</title>
    <link href="http://yoursite.com/2020/01/29/restful%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/"/>
    <id>http://yoursite.com/2020/01/29/restful%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</id>
    <published>2020-01-29T15:16:00.000Z</published>
    <updated>2020-01-30T06:12:42.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restful-架构"><a href="#Restful-架构" class="headerlink" title="Restful 架构:"></a>Restful 架构:</h1><p>使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：  </p><ul><li>GET用来获取资源  </li><li>POST用来新建资源（也可以用于更新资源）  </li><li>PUT用来更新资源  </li><li>DELETE用来删除资源；  </li></ul><table><thead><tr><th></th><th>传统</th><th>restful</th></tr></thead><tbody><tr><td>列表查询</td><td>getMemberList</td><td>member/list— GET</td></tr><tr><td>查询</td><td>getMember?id=xxx</td><td>member/{id} — GET</td></tr><tr><td>添加</td><td>addMember?xxx</td><td>member — POST</td></tr><tr><td>修改</td><td>updateMember?id=xxx</td><td>member/{id} — PUT</td></tr><tr><td>删除</td><td>deleteMember?id=xxx</td><td>member/{id} — PUT</td></tr><tr><td># 项目使用restful风格</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>项目功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有会员</td><td>member/list</td><td>GET</td></tr><tr><td>查询某位会员信息</td><td>member/{id}</td><td>GET</td></tr><tr><td>添加会员</td><td>member</td><td>POST</td></tr><tr><td>前往修改页面（查出会员信息进行信息回显）</td><td>member/{id}</td><td>GET</td></tr><tr><td>修改会员</td><td>member/{id}</td><td>PUT</td></tr><tr><td>删除会员</td><td>member/{id}</td><td>DELETE</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Restful-架构&quot;&gt;&lt;a href=&quot;#Restful-架构&quot; class=&quot;headerlink&quot; title=&quot;Restful 架构:&quot;&gt;&lt;/a&gt;Restful 架构:&lt;/h1&gt;&lt;p&gt;使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端
      
    
    </summary>
    
    
    
      <category term="restful" scheme="http://yoursite.com/tags/restful/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>github上传本地项目到git仓库的步骤</title>
    <link href="http://yoursite.com/2020/01/16/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2020/01/16/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0github%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-01-16T08:01:17.925Z</published>
    <updated>2020-01-16T08:54:10.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github的操作"><a href="#Github的操作" class="headerlink" title="Github的操作"></a>Github的操作</h1><ul><li><p>github新建仓库</p></li><li><p>创建一个本地文件夹  // 本机已创好—F：/github</p></li><li><p>进入此文件夹，鼠标右击gitbash选项  </p></li><li><p>复制创建好仓库后的连接地址，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;alexhigger&#x2F;xxxxx</span><br></pre></td></tr></table></figure></li><li><p>会自动创建本地仓库，在其中添加项目(注意项目中只能有一个.git文件夹)</p><blockquote><p>$ cd xxxx  &emsp;&emsp;&emsp;&emsp;//进入本地仓库<br>$ git add xxxxx  &emsp;&emsp;&emsp;&emsp; //添加项目<br>$ git commit -m “xxxx”    &emsp;&emsp;&emsp;&emsp;//添加备注<br>$ git push origin master   &emsp;&emsp;&emsp;&emsp; //上传  </p></blockquote></li><li><p>然后就自动上传好了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github的操作&quot;&gt;&lt;a href=&quot;#Github的操作&quot; class=&quot;headerlink&quot; title=&quot;Github的操作&quot;&gt;&lt;/a&gt;Github的操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;github新建仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建一个本
      
    
    </summary>
    
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="流程" scheme="http://yoursite.com/tags/%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue-基础</title>
    <link href="http://yoursite.com/2020/01/14/vue/Vue%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/14/vue/Vue%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-13T16:55:00.000Z</published>
    <updated>2020-02-11T10:33:48.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门helloworld"><a href="#入门helloworld" class="headerlink" title="入门helloworld"></a>入门helloworld</h1><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a><strong><em>准备工作</em></strong>：</h2><pre><code>* 在目录下安装vue  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@2.6.10</span><br></pre></td></tr></table></figure></code></pre><h2 id="编写步骤："><a href="#编写步骤：" class="headerlink" title="编写步骤："></a><strong><em>编写步骤</em></strong>：</h2><pre><code>&gt;1. 采用&lt; script&gt;标签引入 vue.js 库&gt;2. 定义一个 &lt;div&gt;&gt;3. new Vue() 实例化Vue应用程序&gt;el 选项： 元素element的缩写，指定被 Vue 管理的 &gt;Dom 节点入口（值为选择器 )，必须是一个普通的&gt;HTML 标签节点，一般是 div。&gt;data 选项：指定初始化数据，在 Vue 所管理的 Dom 节点&gt;下，可通过模板语法来进行使用&gt;4. 标签体显示数据： {{xxxxx}}&gt;5. 表单元素双向数据绑定： v-model&gt;6. 注意： el 的值不能为 html 或 body</code></pre><h2 id="源码实现："><a href="#源码实现：" class="headerlink" title="源码实现："></a><strong><em>源码实现</em></strong>：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        Hello, &#123;&#123;msg&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model进行数据的双向绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,<span class="comment">//指定Vue管理的入口,值为选择器</span></span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                msg:<span class="string">'Vue.js'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用模板："><a href="#常用模板：" class="headerlink" title="常用模板："></a><strong><em>常用模板</em></strong>：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h1><h2 id="模板数据绑定渲染"><a href="#模板数据绑定渲染" class="headerlink" title="模板数据绑定渲染"></a>模板数据绑定渲染</h2><blockquote><p>可生成动态的HTML页面，页面中使用嵌入 Vue.js 语法可动态生成</p><ol><li> 双大括号文本绑定</li><li>v-xxxx 以 v- 开头用于标签属性绑定，称为指令</li></ol></blockquote><hr><h2 id="双大括号语法"><a href="#双大括号语法" class="headerlink" title="双大括号语法"></a>双大括号语法</h2><ul><li>格式： </li><li>作用：<ul><li>使用在标签体中，用于获取数据</li><li>可以使用 JavaScript 表达式</li></ul></li><li>案例源码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &#123;&#123;JS表达式&#125;&#125;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1、&#123;&#123;&#125;&#125;双大括号输出文本内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文本内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JS表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;score+1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 v-once 指令能执行一次性地插值，当数据改变时，插值处的内容不会更新。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>2、一次性插值 v-once <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span> 这个将不会改变: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm= <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">             el:<span class="string">"#app"</span>,</span></span><br><span class="line">             data:&#123;</span><br><span class="line"><span class="actionscript">                 message:<span class="string">'wzh'</span>,</span></span><br><span class="line">                 score:100</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="一次性插值-v-once"><a href="#一次性插值-v-once" class="headerlink" title="一次性插值 v-once"></a>一次性插值 v-once</h2><ul><li>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>2、一次性插值 v-once <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span> 这个将不会改变: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="输出HTML指令-v-html"><a href="#输出HTML指令-v-html" class="headerlink" title="输出HTML指令 v-html"></a>输出HTML指令 v-html</h2><ul><li><p>格式： v-html=’xxxx’</p></li><li><p>作用：  </p><ul><li><p>如果是HTML格式数据，双大括号会将数据解释为普通文本，为了输出真正的 HTML，你需要使用 v-html指令。</p></li><li><p>Vue 为了防止 XSS 攻击，在此指令上做了安全处理，当发现输出内容有 script 标签时，则不渲染</p><ul><li>XSS 攻击主要利用 JS 脚本注入到网页中，读取 Cookie 值（Cookie一般存储了登录身份信息），读取</li><li>到了发送到黑客服务器，从而黑客可以使用你的帐户做非法操作。  XSS 攻击还可以在你进入到支付时，跳转到钓鱼网站。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3、v-html 指令输出真正的 HTML 内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>双大括号：&#123;&#123; contentHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指令的值不需要使用双大括号获取，直接写获取的属性名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;p&gt;v-html指令：&lt;span v-html="&#123;&#123;contentHtml&#125;&#125;"&gt;&lt;/span&gt;&lt;/p&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>v-html指令：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"contentHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">        message: <span class="string">'haha'</span>,</span></span><br><span class="line">        number: 1,</span><br><span class="line"><span class="handlebars"><span class="xml">        //contentHtml: '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>红色字体内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        contentHtml: '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>红色字体内容&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"hello vue"</span>)</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>效果图<br><img src="http://a1.qpic.cn/psc?/V139EQsF0kHTPj/POwAobJtn54NCYlSXd4O2SDweNUlHVWFzC7iAfqe.4.EUqteqY848zgC6eAPbQxsL9sXKmqTIuoKD0hN0Twl*Q!!/c&ek=1&kp=1&pt=0&bo=egKdAAAAAAADF9c!&tl=1&vuin=3146467996&tm=1578927600&sce=60-2-2&rf=newphoto&t=5" alt=""></p></li></ul><hr><h2 id="元素绑定指令-v-bind"><a href="#元素绑定指令-v-bind" class="headerlink" title="元素绑定指令 v-bind"></a>元素绑定指令 v-bind</h2><ul><li>完整格式： v-bind:元素的属性名=’xxxx’</li><li>缩写格式： 元素的属性名=’xxxx’</li><li>作用：将数据动态绑定到指定的元素上</li><li>案例源码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>4、v-bind 属性绑定指令<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 红色字体是正常的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">"VueLogo"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">"VueLogo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">             imgUrl: <span class="string">'https://cn.vuejs.org/images/logo.png'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>效果图<br><img src="http://m.qpic.cn/psc?/V139EQsF0kHTPj/I4OEOPrz6D2aFnaB6dwLRaMtjDbXjsQNyH3nYnfydeXJy4Xi5QoMP3IxZuV7tOZuD1yE6UZAE0jQVIxhU4wSxbVQirhv0gC*QzHGpyCqmRc!/b&bo=VwNsAQAAAAADBxs!&rf=viewer_4" alt=""></li></ul><hr><h2 id="事件绑定指令-v-on"><a href="#事件绑定指令-v-on" class="headerlink" title="事件绑定指令 v-on"></a>事件绑定指令 v-on</h2><ul><li>完整格式： v-on:事件名称=”事件处理函数名”</li><li>缩写格式： @事件名称=”事件处理函数名” 注意： @ 后面没有冒号</li><li>作用：用于监听 DOM 事件</li><li>案例源码： 每点击1次，数据就加1<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>5、v-on 事件绑定指令<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">'num'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">'num'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>点击+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">'num2'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"del"</span>&gt;</span>点击-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                num: 10,</span><br><span class="line">                num2: 100</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            methods: &#123; <span class="comment">//指定事件处理方法, 在模板页面中通过 v-on:事件名 来调用</span></span></span><br><span class="line"><span class="actionscript">                add: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">//key为方法名</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'add被调用'</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// this 表示当前 vm 实例</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.num++ <span class="comment">//每点击1次num加1</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                del:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.num2--</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>效果图<br><img src="http://a1.qpic.cn/psc?/V139EQsF0kHTPj/POwAobJtn54NCYlSXd4O2ejBjc.K7XldWyruQwGeWx0Qgqdfd7K53cGPy5j1BMVcf4pn8g9wVcf40JY0Q4CqSw!!/c&ek=1&kp=1&pt=0&bo=tgKaAAAAAAADFxw!&tl=1&vuin=3146467996&tm=1578931200&sce=60-2-2&rf=0-0" alt=""></li></ul><hr><h2 id="计算属性和监听器"><a href="#计算属性和监听器" class="headerlink" title="计算属性和监听器"></a>计算属性和监听器</h2><h3 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h3><ul><li>computed 选项定义计算属性</li><li>计算属性 类似于 methods 选项中定义的函数<ul><li>计算属性 会进行缓存，只在相关响应式依赖发生改变时它们才会重新求值。</li><li>函数 每次都会执行函数体进行计算。<h3 id="计算属性（双向绑定）"><a href="#计算属性（双向绑定）" class="headerlink" title="计算属性（双向绑定）"></a>计算属性（双向绑定）</h3></li><li>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter<h3 id="监听器-watch"><a href="#监听器-watch" class="headerlink" title="监听器 watch"></a>监听器 watch</h3></li><li>当属性数据发生变化时,对应属性的回调函数会自动调用, 在函数内部进行计算</li><li>通过 watch 选项 或者 vm 实例的 $watch() 来监听指定的属性<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3></li></ul></li><li>通过 watch 选项 监听数学分数， 当数学更新后回调函数中重新计算总分 + sumScore3</li><li>通过 vm.$watch() 选项 监听英语分数， 当英语更新后回调函数中重新算总分    + sumScore3</li><li>源码实现：<br>注意: 在data 选择中添加一个 sumScore3 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        数学：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"mathScore"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        英语：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"englishScore"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        总分(方法-单向)：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sumScore()"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        总分(计算属性-单向)：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sumScore1"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        总分(计算属性-双向)：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sumScore2"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        总分(监听器)：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sumScore3"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                mathScore: 80,</span><br><span class="line">                englishScore: 90,</span><br><span class="line">                sumScore3: 170</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            methods: &#123; <span class="comment">//不要少了s</span></span></span><br><span class="line"><span class="actionscript">                sumScore: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//在控制台输入 vm.sumScore() 每次都会被调用</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'sumScore被调用'</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// `this` 指向当前 vm 实例， 减 0 是为了字符串转为数字运算</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> (<span class="keyword">this</span>.mathScore - <span class="number">0</span>) + (<span class="keyword">this</span>.englishScore - <span class="number">0</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 计算属性</span></span></span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 默认 getter 只支持单向绑定</span></span></span><br><span class="line"><span class="actionscript">                sumScore1: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//在控制台输入 vm.sumScore1 不会被重新调用 ,说明计算属性有缓存</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'sumScore1被调用'</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> (<span class="keyword">this</span>.mathScore - <span class="number">0</span>) + (<span class="keyword">this</span>.englishScore - <span class="number">0</span>)</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                <span class="comment">//指定 getter/setter 双向绑定</span></span></span><br><span class="line">                sumScore2: &#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'sumScore2被调用'</span>)</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span> (<span class="keyword">this</span>.mathScore - <span class="number">0</span>) + (<span class="keyword">this</span>.englishScore - <span class="number">0</span>)</span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="actionscript">                    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;<span class="comment">//value为更新后的值</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 被调用则更新了sumScore2，然后将数学和英语更新为平均分</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> avgScore = newValue / <span class="number">2</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.mathScore = avgScore</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.englishScore = avgScore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">//监听器方式1：watch选项</span></span></span><br><span class="line">            watch: &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//当数学修改后，更新总分sumScore3</span></span></span><br><span class="line"><span class="actionscript">                mathScore: <span class="function"><span class="keyword">function</span> <span class="params">(newValue, oldValue)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//newValue 就是新输入的数学得分</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.sumScore3 = (newValue - <span class="number">0</span>) + (<span class="keyword">this</span>.englishScore - <span class="number">0</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        <span class="comment">//监听器方式2：通过vm对象调用</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//第1个参数为监听的属性名，第2个回调函数</span></span></span><br><span class="line"><span class="actionscript">        vm.$watch(<span class="string">'englishScore'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//newValue 就是新输入的英语得分</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.sumScore3 = (newValue - <span class="number">0</span>) + (<span class="keyword">this</span>.mathScore - <span class="number">0</span>)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入门helloworld&quot;&gt;&lt;a href=&quot;#入门helloworld&quot; class=&quot;headerlink&quot; title=&quot;入门helloworld&quot;&gt;&lt;/a&gt;入门helloworld&lt;/h1&gt;&lt;h2 id=&quot;准备工作：&quot;&gt;&lt;a href=&quot;#准备工作：&quot; c
      
    
    </summary>
    
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>springboot--异步传输与定时任务</title>
    <link href="http://yoursite.com/2020/01/11/springboot%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/01/11/springboot%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-01-11T11:37:35.108Z</published>
    <updated>2020-01-13T16:54:57.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步传输"><a href="#异步传输" class="headerlink" title="异步传输"></a>异步传输</h2><blockquote><p>在项目开发中，绝大多数情况下都是通过同步方式处理业务逻辑的，但是比如批量处理数据，批量发送邮<br>件，批量发送短信等操作 容易造成阻塞的情况，之前大部分都是使用多线程来完成此类任务。<br>而在Spring 3+之后，就已经内置了 @Async 注解来完美解决这个问题，从而提高效率。<br>使用的注解：</p><ul><li><strong><em>@EnableAysnc</em></strong> 启动类上开启基于注解的异步任务</li><li><strong><em>@Aysnc</em></strong> 标识的方法会异步执行</li></ul></blockquote><hr><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote><p>在项目开发中，经常需要执行一些定时任务，比如 每月1号凌晨需要汇总上个月的数据分析报表; 每天凌晨分<br>析前一天的日志信息等定时操作。Spring 为我们提供了异步执行定时任务调度的方式。<br>使用的注解：</p><ul><li><strong><em>@EnableScheduling</em></strong> 启动类上开启基于注解的定时任务</li><li><strong><em>@Scheduled</em></strong> 标识的方法会进行定时处理<br>需要通过 <strong>cron</strong> 属性来指定 cron 表达式： 秒 分 时 日 月 星期几</li></ul><blockquote><p>在线生成cron表达式 <a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a><br>例如</p><figure class="highlight plain"><figcaption><span>* * * * 1到5秒，每秒都触发任务</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;5 * * * * 每隔5秒执行一次</span><br><span class="line">0 *&#x2F;1 * * * 每隔1分钟执行一次</span><br><span class="line">0 0 5-15 * * 每天5-15点整点触发</span><br><span class="line">0 0-5 14 * * 在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">0 0&#x2F;5 14 * * 在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">0 0&#x2F;5 14,18 * * 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">0 0&#x2F;30 9-17 * * 朝九晚五工作时间内每半小时</span><br><span class="line">0 0 12 ? * WED 表示每个星期三中午12点</span><br><span class="line">0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">0 0 23 L * ? 每月最后一天23点执行一次</span><br><span class="line">0 15 10 LW * ? 每个月最后一个工作日的10点15分0秒触发任务</span><br><span class="line">0 15 10 ? * 5#3 每个月第三周的星期五的10点15分0秒触发任务</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异步传输&quot;&gt;&lt;a href=&quot;#异步传输&quot; class=&quot;headerlink&quot; title=&quot;异步传输&quot;&gt;&lt;/a&gt;异步传输&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在项目开发中，绝大多数情况下都是通过同步方式处理业务逻辑的，但是比如批量处理数据，批量发送邮&lt;br
      
    
    </summary>
    
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/25/hello-world/"/>
    <id>http://yoursite.com/2019/12/25/hello-world/</id>
    <published>2019-12-25T15:24:39.801Z</published>
    <updated>2020-01-13T17:14:09.677Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2019/12/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/12/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2019-12-22T08:27:06.000Z</published>
    <updated>2020-01-13T17:14:21.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第二章&quot;&gt;&lt;a href=&quot;#第二章&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
